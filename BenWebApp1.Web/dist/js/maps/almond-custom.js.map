{"version":3,"sources":["almond-custom.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","slice","length","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","req","apply","aps","arguments","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","args","defining","main","Error","splitPrefix","prefix","index","onResourceLoad","deps","id","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","uri","callback","cjsModule","ret","usingExports","load","alt","setTimeout","cfg","_defined","amd","jQuery"],"mappings":"AAUA,GAAIA,WAAWC,QAASC,QACvB,SAAUC,GASP,QAASC,GAAQC,EAAKC,GAClB,MAAOC,GAAOC,KAAKH,EAAKC,GAW5B,QAASG,GAAUC,EAAMC,GACrB,GAAIC,GAAWC,EAAaC,EAAUC,EAClCC,EAAQC,EAAcC,EAAOC,EAAGC,EAAGC,EACnCC,EAAYX,GAAYA,EAASY,MAAM,KACvCC,EAAMC,EAAOD,IACbE,EAAWF,GAAOA,EAAI,QAG1B,IAAId,GAA2B,MAAnBA,EAAKiB,OAAO,GAIpB,GAAIhB,EAAU,CAWV,IALAW,EAAYA,EAAUM,MAAM,EAAGN,EAAUO,OAAS,GAElDnB,EAAOY,EAAUQ,OAAOpB,EAAKa,MAAM,MAG9BJ,EAAI,EAAGA,EAAIT,EAAKmB,OAAQV,GAAK,EAE9B,GADAE,EAAOX,EAAKS,GACC,MAATE,EACAX,EAAKqB,OAAOZ,EAAG,GACfA,GAAK,MACF,IAAa,OAATE,EAAe,CACtB,GAAU,IAANF,IAAwB,OAAZT,EAAK,IAA2B,OAAZA,EAAK,IAOrC,KACOS,GAAI,IACXT,EAAKqB,OAAOZ,EAAI,EAAG,GACnBA,GAAK,GAMjBT,EAAOA,EAAKsB,KAAK,SACa,KAAvBtB,EAAKuB,QAAQ,QAGpBvB,EAAOA,EAAKwB,UAAU,GAK9B,KAAKZ,GAAaI,IAAYF,EAAK,CAG/B,IAFAZ,EAAYF,EAAKa,MAAM,KAElBJ,EAAIP,EAAUiB,OAAQV,EAAI,EAAGA,GAAK,EAAG,CAGtC,GAFAN,EAAcD,EAAUgB,MAAM,EAAGT,GAAGa,KAAK,KAErCV,EAGA,IAAKF,EAAIE,EAAUO,OAAQT,EAAI,EAAGA,GAAK,EAKnC,GAJAN,EAAWU,EAAIF,EAAUM,MAAM,EAAGR,GAAGY,KAAK,MAItClB,IACAA,EAAWA,EAASD,IACN,CAEVE,EAAWD,EACXE,EAASG,CACT,OAMhB,GAAIJ,EACA,OAMCE,GAAgBS,GAAWA,EAAQb,KACpCI,EAAeS,EAAQb,GACvBK,EAAQC,IAIXJ,GAAYE,IACbF,EAAWE,EACXD,EAASE,GAGTH,IACAH,EAAUmB,OAAO,EAAGf,EAAQD,GAC5BL,EAAOE,EAAUoB,KAAK,MAI9B,MAAOtB,GAGX,QAASyB,GAAYC,EAASC,GAC1B,MAAO,YAIH,MAAOC,GAAIC,MAAMpC,EAAOqC,EAAIhC,KAAKiC,UAAW,GAAGX,QAAQM,EAASC,MAIxE,QAASK,GAAcN,GACnB,MAAO,UAAU1B,GACb,MAAOD,GAAUC,EAAM0B,IAI/B,QAASO,GAASC,GACd,MAAO,UAAUC,GACbC,EAAQF,GAAWC,GAI3B,QAASE,GAAQrC,GACb,GAAIN,EAAQ4C,EAAStC,GAAO,CACxB,GAAIuC,GAAOD,EAAQtC,SACZsC,GAAQtC,GACfwC,EAASxC,IAAQ,EACjByC,EAAKZ,MAAMpC,EAAO8C,GAGtB,IAAK7C,EAAQ0C,EAASpC,KAAUN,EAAQ8C,EAAUxC,GAC9C,KAAM,IAAI0C,OAAM,MAAQ1C,EAE5B,OAAOoC,GAAQpC,GAMnB,QAAS2C,GAAY3C,GACjB,GAAI4C,GACAC,EAAQ7C,EAAOA,EAAKuB,QAAQ,OAKhC,OAJIsB,QACAD,EAAS5C,EAAKwB,UAAU,EAAGqB,GAC3B7C,EAAOA,EAAKwB,UAAUqB,EAAQ,EAAG7C,EAAKmB,UAElCyB,EAAQ5C,GAGpB,QAAS8C,GAAe9C,EAAMoC,EAASW,GAChCzD,UAAUwD,gBAAkB9C,GAC3BV,UAAUwD,gBAAgBV,QAAQA,IAAWY,GAAGhD,GAAO+C,GA+C/D,QAASE,GAAWjD,GAChB,MAAO,YACH,MAAQe,IAAUA,EAAOA,QAAUA,EAAOA,OAAOf,QAlOzD,GAAIyC,GAAMb,EAAKsB,EAASC,EACpBf,KACAE,KACAvB,KACAyB,KACA3C,EAASuD,OAAOC,UAAUC,eAC1BxB,KAASZ,KAoLbgC,GAAU,SAAUlD,EAAM0B,GACtB,GAAI6B,GACAC,EAAQb,EAAY3C,GACpB4C,EAASY,EAAM,EA2BnB,OAzBAxD,GAAOwD,EAAM,GAETZ,IACAA,EAAS7C,EAAU6C,EAAQlB,GAC3B6B,EAASlB,EAAQO,IAIjBA,EAEI5C,EADAuD,GAAUA,EAAOxD,UACVwD,EAAOxD,UAAUC,EAAMgC,EAAcN,IAErC3B,EAAUC,EAAM0B,IAG3B1B,EAAOD,EAAUC,EAAM0B,GACvB8B,EAAQb,EAAY3C,GACpB4C,EAASY,EAAM,GACfxD,EAAOwD,EAAM,GACTZ,IACAW,EAASlB,EAAQO,MAMrBa,EAAGb,EAASA,EAAS,IAAM5C,EAAOA,EAClC0D,EAAG1D,EACH2D,GAAIf,EACJgB,EAAGL,IAUXJ,GACI5D,QAAS,SAAUS,GACf,MAAOyB,GAAYzB,IAEvB6D,QAAS,SAAU7D,GACf,GAAI8D,GAAI1B,EAAQpC,EAChB,OAAiB,mBAAN8D,GACAA,EAEC1B,EAAQpC,OAGxB+D,OAAQ,SAAU/D,GACd,OACIgD,GAAIhD,EACJgE,IAAK,GACLH,QAASzB,EAAQpC,GACjBe,OAAQkC,EAAWjD,MAK/ByC,EAAO,SAAUzC,EAAM+C,EAAMkB,EAAUvC,GACnC,GAAIwC,GAAWhC,EAASiC,EAAKrD,EAAKL,EAE9B2D,EADA7B,IAOJ,IAHAb,EAAUA,GAAW1B,EAGG,kBAAbiE,GAAyB,CAMhC,IADAlB,GAAQA,EAAK5B,QAAU8C,EAAS9C,QAAU,UAAW,UAAW,UAAY4B,EACvEtC,EAAI,EAAGA,EAAIsC,EAAK5B,OAAQV,GAAK,EAK9B,GAJAK,EAAMoC,EAAQH,EAAKtC,GAAIiB,GACvBQ,EAAUpB,EAAI2C,EAGE,YAAZvB,EACAK,EAAK9B,GAAK0C,EAAS5D,QAAQS,OACxB,IAAgB,YAAZkC,EAEPK,EAAK9B,GAAK0C,EAASU,QAAQ7D,GAC3BoE,GAAe,MACZ,IAAgB,WAAZlC,EAEPgC,EAAY3B,EAAK9B,GAAK0C,EAASY,OAAO/D,OACnC,IAAIN,EAAQ0C,EAASF,IACjBxC,EAAQ4C,EAASJ,IACjBxC,EAAQ8C,EAAUN,GACzBK,EAAK9B,GAAK4B,EAAQH,OACf,CAAA,IAAIpB,EAAI8C,EAIX,KAAM,IAAIlB,OAAM1C,EAAO,YAAckC,EAHrCpB,GAAI8C,EAAES,KAAKvD,EAAI4C,EAAGjC,EAAYC,GAAS,GAAOO,EAASC,OACvDK,EAAK9B,GAAK2B,EAAQF,GAM1BiC,EAAMF,EAASpC,MAAMO,EAAQpC,GAAOuC,GAEhCvC,IAIIkE,GAAaA,EAAUL,UAAYpE,GAC/ByE,EAAUL,UAAYzB,EAAQpC,GAClCoC,EAAQpC,GAAQkE,EAAUL,QACnBM,IAAQ1E,GAAU2E,IAEzBhC,EAAQpC,GAAQmE,QAGjBnE,KAGPoC,EAAQpC,GAAQiE,EAGpBnB,GAAe9C,EAAMoC,EAASG,IAGlCjD,UAAYC,QAAUqC,EAAM,SAAUmB,EAAMkB,EAAUvC,EAASC,EAAW2C,GACtE,MAAoB,gBAATvB,GACHI,EAASJ,GAEFI,EAASJ,GAAMkB,GAMnB5B,EAAQa,EAAQH,EAAMkB,GAAUR,IAC/BV,EAAK1B,SAEbN,EAASgC,EACLkB,EAAS5C,QAGT0B,EAAOkB,EACPA,EAAWvC,EACXA,EAAU,MAEVqB,EAAOtD,GAKfwE,EAAWA,GAAY,aAIA,kBAAZvC,KACPA,EAAUC,EACVA,EAAY2C,GAIZ3C,EACAc,EAAKhD,EAAOsD,EAAMkB,EAAUvC,GAQ5B6C,WAAW,WACP9B,EAAKhD,EAAOsD,EAAMkB,EAAUvC,IAC7B,GAGAE,IAOXA,EAAIb,OAAS,SAAUyD,GAKnB,MAJAzD,GAASyD,EACLzD,EAAOgC,MACPnB,EAAIb,EAAOgC,KAAMhC,EAAOkD,UAErBrC,GAMXtC,UAAUmF,SAAWrC,EAErB5C,OAAS,SAAUQ,EAAM+C,EAAMkB,GAGtBlB,EAAK1B,SAIN4C,EAAWlB,EACXA,MAGCrD,EAAQ0C,EAASpC,IAAUN,EAAQ4C,EAAStC,KAC7CsC,EAAQtC,IAASA,EAAM+C,EAAMkB,KAIrCzE,OAAOkF,KACHC,QAAQ","file":"../almond-custom.js","sourcesContent":["/**\r\n * almond 0.2.6 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/jrburke/almond for details\r\n */\r\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\r\n//be followed.\r\n/*jslint sloppy: true */\r\n/*global setTimeout: false */\r\n\r\nvar requirejs, require, define;\r\n(function (undef) {\r\n    var main, req, makeMap, handlers,\r\n        defined = {},\r\n        waiting = {},\r\n        config = {},\r\n        defining = {},\r\n        hasOwn = Object.prototype.hasOwnProperty,\r\n        aps = [].slice;\r\n\r\n    function hasProp(obj, prop) {\r\n        return hasOwn.call(obj, prop);\r\n    }\r\n\r\n    /**\r\n     * Given a relative module name, like ./something, normalize it to\r\n     * a real name that can be mapped to a path.\r\n     * @param {String} name the relative name\r\n     * @param {String} baseName a real name that the name arg is relative\r\n     * to.\r\n     * @returns {String} normalized name\r\n     */\r\n    function normalize(name, baseName) {\r\n        var nameParts, nameSegment, mapValue, foundMap,\r\n            foundI, foundStarMap, starI, i, j, part,\r\n            baseParts = baseName && baseName.split(\"/\"),\r\n            map = config.map,\r\n            starMap = (map && map['*']) || {};\r\n\r\n        //Adjust any relative paths.\r\n        if (name && name.charAt(0) === \".\") {\r\n            //If have a base name, try to normalize against it,\r\n            //otherwise, assume it is a top-level require that will\r\n            //be relative to baseUrl in the end.\r\n            if (baseName) {\r\n                //Convert baseName to array, and lop off the last part,\r\n                //so that . matches that \"directory\" and not name of the baseName's\r\n                //module. For instance, baseName of \"one/two/three\", maps to\r\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\r\n                //this normalization.\r\n                baseParts = baseParts.slice(0, baseParts.length - 1);\r\n\r\n                name = baseParts.concat(name.split(\"/\"));\r\n\r\n                //start trimDots\r\n                for (i = 0; i < name.length; i += 1) {\r\n                    part = name[i];\r\n                    if (part === \".\") {\r\n                        name.splice(i, 1);\r\n                        i -= 1;\r\n                    } else if (part === \"..\") {\r\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\r\n                            //End of the line. Keep at least one non-dot\r\n                            //path segment at the front so it can be mapped\r\n                            //correctly to disk. Otherwise, there is likely\r\n                            //no path mapping for a path starting with '..'.\r\n                            //This can still fail, but catches the most reasonable\r\n                            //uses of ..\r\n                            break;\r\n                        } else if (i > 0) {\r\n                            name.splice(i - 1, 2);\r\n                            i -= 2;\r\n                        }\r\n                    }\r\n                }\r\n                //end trimDots\r\n\r\n                name = name.join(\"/\");\r\n            } else if (name.indexOf('./') === 0) {\r\n                // No baseName, so this is ID is resolved relative\r\n                // to baseUrl, pull off the leading dot.\r\n                name = name.substring(2);\r\n            }\r\n        }\r\n\r\n        //Apply map config if available.\r\n        if ((baseParts || starMap) && map) {\r\n            nameParts = name.split('/');\r\n\r\n            for (i = nameParts.length; i > 0; i -= 1) {\r\n                nameSegment = nameParts.slice(0, i).join(\"/\");\r\n\r\n                if (baseParts) {\r\n                    //Find the longest baseName segment match in the config.\r\n                    //So, do joins on the biggest to smallest lengths of baseParts.\r\n                    for (j = baseParts.length; j > 0; j -= 1) {\r\n                        mapValue = map[baseParts.slice(0, j).join('/')];\r\n\r\n                        //baseName segment has  config, find if it has one for\r\n                        //this name.\r\n                        if (mapValue) {\r\n                            mapValue = mapValue[nameSegment];\r\n                            if (mapValue) {\r\n                                //Match, update name to the new value.\r\n                                foundMap = mapValue;\r\n                                foundI = i;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (foundMap) {\r\n                    break;\r\n                }\r\n\r\n                //Check for a star map match, but just hold on to it,\r\n                //if there is a shorter segment match later in a matching\r\n                //config, then favor over this star map.\r\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\r\n                    foundStarMap = starMap[nameSegment];\r\n                    starI = i;\r\n                }\r\n            }\r\n\r\n            if (!foundMap && foundStarMap) {\r\n                foundMap = foundStarMap;\r\n                foundI = starI;\r\n            }\r\n\r\n            if (foundMap) {\r\n                nameParts.splice(0, foundI, foundMap);\r\n                name = nameParts.join('/');\r\n            }\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    function makeRequire(relName, forceSync) {\r\n        return function () {\r\n            //A version of a require function that passes a moduleName\r\n            //value for items that may need to\r\n            //look up paths relative to the moduleName\r\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\r\n        };\r\n    }\r\n\r\n    function makeNormalize(relName) {\r\n        return function (name) {\r\n            return normalize(name, relName);\r\n        };\r\n    }\r\n\r\n    function makeLoad(depName) {\r\n        return function (value) {\r\n            defined[depName] = value;\r\n        };\r\n    }\r\n\r\n    function callDep(name) {\r\n        if (hasProp(waiting, name)) {\r\n            var args = waiting[name];\r\n            delete waiting[name];\r\n            defining[name] = true;\r\n            main.apply(undef, args);\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\r\n            throw new Error('No ' + name);\r\n        }\r\n        return defined[name];\r\n    }\r\n\r\n    //Turns a plugin!resource to [plugin, resource]\r\n    //with the plugin being undefined if the name\r\n    //did not have a plugin prefix.\r\n    function splitPrefix(name) {\r\n        var prefix,\r\n            index = name ? name.indexOf('!') : -1;\r\n        if (index > -1) {\r\n            prefix = name.substring(0, index);\r\n            name = name.substring(index + 1, name.length);\r\n        }\r\n        return [prefix, name];\r\n    }\r\n\r\n    function onResourceLoad(name, defined, deps){\r\n        if(requirejs.onResourceLoad && name){\r\n            requirejs.onResourceLoad({defined:defined}, {id:name}, deps);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes a name map, normalizing the name, and using a plugin\r\n     * for normalization if necessary. Grabs a ref to plugin\r\n     * too, as an optimization.\r\n     */\r\n    makeMap = function (name, relName) {\r\n        var plugin,\r\n            parts = splitPrefix(name),\r\n            prefix = parts[0];\r\n\r\n        name = parts[1];\r\n\r\n        if (prefix) {\r\n            prefix = normalize(prefix, relName);\r\n            plugin = callDep(prefix);\r\n        }\r\n\r\n        //Normalize according\r\n        if (prefix) {\r\n            if (plugin && plugin.normalize) {\r\n                name = plugin.normalize(name, makeNormalize(relName));\r\n            } else {\r\n                name = normalize(name, relName);\r\n            }\r\n        } else {\r\n            name = normalize(name, relName);\r\n            parts = splitPrefix(name);\r\n            prefix = parts[0];\r\n            name = parts[1];\r\n            if (prefix) {\r\n                plugin = callDep(prefix);\r\n            }\r\n        }\r\n\r\n        //Using ridiculous property names for space reasons\r\n        return {\r\n            f: prefix ? prefix + '!' + name : name, //fullName\r\n            n: name,\r\n            pr: prefix,\r\n            p: plugin\r\n        };\r\n    };\r\n\r\n    function makeConfig(name) {\r\n        return function () {\r\n            return (config && config.config && config.config[name]) || {};\r\n        };\r\n    }\r\n\r\n    handlers = {\r\n        require: function (name) {\r\n            return makeRequire(name);\r\n        },\r\n        exports: function (name) {\r\n            var e = defined[name];\r\n            if (typeof e !== 'undefined') {\r\n                return e;\r\n            } else {\r\n                return (defined[name] = {});\r\n            }\r\n        },\r\n        module: function (name) {\r\n            return {\r\n                id: name,\r\n                uri: '',\r\n                exports: defined[name],\r\n                config: makeConfig(name)\r\n            };\r\n        }\r\n    };\r\n\r\n    main = function (name, deps, callback, relName) {\r\n        var cjsModule, depName, ret, map, i,\r\n            args = [],\r\n            usingExports;\r\n\r\n        //Use name if no relName\r\n        relName = relName || name;\r\n\r\n        //Call the callback to define the module, if necessary.\r\n        if (typeof callback === 'function') {\r\n\r\n            //Pull out the defined dependencies and pass the ordered\r\n            //values to the callback.\r\n            //Default to [require, exports, module] if no deps\r\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\r\n            for (i = 0; i < deps.length; i += 1) {\r\n                map = makeMap(deps[i], relName);\r\n                depName = map.f;\r\n\r\n                //Fast path CommonJS standard dependencies.\r\n                if (depName === \"require\") {\r\n                    args[i] = handlers.require(name);\r\n                } else if (depName === \"exports\") {\r\n                    //CommonJS module spec 1.1\r\n                    args[i] = handlers.exports(name);\r\n                    usingExports = true;\r\n                } else if (depName === \"module\") {\r\n                    //CommonJS module spec 1.1\r\n                    cjsModule = args[i] = handlers.module(name);\r\n                } else if (hasProp(defined, depName) ||\r\n                           hasProp(waiting, depName) ||\r\n                           hasProp(defining, depName)) {\r\n                    args[i] = callDep(depName);\r\n                } else if (map.p) {\r\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\r\n                    args[i] = defined[depName];\r\n                } else {\r\n                    throw new Error(name + ' missing ' + depName);\r\n                }\r\n            }\r\n\r\n            ret = callback.apply(defined[name], args);\r\n\r\n            if (name) {\r\n                //If setting exports via \"module\" is in play,\r\n                //favor that over return value and exports. After that,\r\n                //favor a non-undefined return value over exports use.\r\n                if (cjsModule && cjsModule.exports !== undef &&\r\n                        cjsModule.exports !== defined[name]) {\r\n                    defined[name] = cjsModule.exports;\r\n                } else if (ret !== undef || !usingExports) {\r\n                    //Use the return value from the function.\r\n                    defined[name] = ret;\r\n                }\r\n            }\r\n        } else if (name) {\r\n            //May just be an object definition for the module. Only\r\n            //worry about defining if have a module name.\r\n            defined[name] = callback;\r\n        }\r\n\r\n        onResourceLoad(name, defined, args);\r\n    };\r\n\r\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\r\n        if (typeof deps === \"string\") {\r\n            if (handlers[deps]) {\r\n                //callback in this case is really relName\r\n                return handlers[deps](callback);\r\n            }\r\n            //Just return the module wanted. In this scenario, the\r\n            //deps arg is the module name, and second arg (if passed)\r\n            //is just the relName.\r\n            //Normalize module name, if it contains . or ..\r\n            return callDep(makeMap(deps, callback).f);\r\n        } else if (!deps.splice) {\r\n            //deps is a config object, not an array.\r\n            config = deps;\r\n            if (callback.splice) {\r\n                //callback is an array, which means it is a dependency list.\r\n                //Adjust args if there are dependencies\r\n                deps = callback;\r\n                callback = relName;\r\n                relName = null;\r\n            } else {\r\n                deps = undef;\r\n            }\r\n        }\r\n\r\n        //Support require(['a'])\r\n        callback = callback || function () {};\r\n\r\n        //If relName is a function, it is an errback handler,\r\n        //so remove it.\r\n        if (typeof relName === 'function') {\r\n            relName = forceSync;\r\n            forceSync = alt;\r\n        }\r\n\r\n        //Simulate async callback;\r\n        if (forceSync) {\r\n            main(undef, deps, callback, relName);\r\n        } else {\r\n            //Using a non-zero value because of concern for what old browsers\r\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\r\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\r\n            //If want a value immediately, use require('id') instead -- something\r\n            //that works in almond on the global level, but not guaranteed and\r\n            //unlikely to work in other AMD implementations.\r\n            setTimeout(function () {\r\n                main(undef, deps, callback, relName);\r\n            }, 4);\r\n        }\r\n\r\n        return req;\r\n    };\r\n\r\n    /**\r\n     * Just drops the config on the floor, but returns req in case\r\n     * the config return value is used.\r\n     */\r\n    req.config = function (cfg) {\r\n        config = cfg;\r\n        if (config.deps) {\r\n            req(config.deps, config.callback);\r\n        }\r\n        return req;\r\n    };\r\n\r\n    /**\r\n     * Expose module registry for debugging and tooling\r\n     */\r\n    requirejs._defined = defined;\r\n\r\n    define = function (name, deps, callback) {\r\n\r\n        //This module may not have dependencies\r\n        if (!deps.splice) {\r\n            //deps is not an array, so probably means\r\n            //an object literal or factory function for\r\n            //the value. Adjust args.\r\n            callback = deps;\r\n            deps = [];\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\r\n            waiting[name] = [name, deps, callback];\r\n        }\r\n    };\r\n\r\n    define.amd = {\r\n        jQuery: true\r\n    };\r\n}());\r\n"]}