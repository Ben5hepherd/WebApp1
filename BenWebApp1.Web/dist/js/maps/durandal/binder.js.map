{"version":3,"sources":["durandal/binder.js"],"names":["define","system","ko","normalizeBindingInstruction","result","undefined","applyBindings","isBoolean","doBind","obj","view","bindingTarget","data","binder","throwOnErrors","error","insufficientInfoMessage","log","getAttribute","unexpectedViewMessage","viewName","instruction","binding","utils","domData","set","koBindingContextKey","$data","bindingComplete","bindingInstructionKey","e","message","getModuleId","noop","getBindingInstruction","get","bindContext","bindingContext","dataAlias","createChildContext","bind"],"mappings":"AAWAA,QAAQ,kBAAmB,YAAa,SAAUC,EAAQC,GAOtD,QAASC,GAA4BC,GACjC,MAAcC,UAAXD,GACUE,eAAe,GAGzBL,EAAOM,UAAUH,IACPE,cAAcF,IAGCC,SAAzBD,EAAOE,gBACNF,EAAOE,eAAgB,GAGpBF,GAGX,QAASI,GAAOC,EAAKC,EAAMC,EAAeC,GACtC,IAAKF,IAASC,EAMV,YALIE,EAAOC,cACPb,EAAOc,MAAMC,GAEbf,EAAOgB,IAAID,EAAyBN,EAAME,GAKlD,KAAKF,EAAKQ,aAMN,YALIL,EAAOC,cACPb,EAAOc,MAAMI,GAEblB,EAAOgB,IAAIE,EAAuBT,EAAME,GAKhD,IAAIQ,GAAWV,EAAKQ,aAAa,YAEjC,KACI,GAAIG,EAuBJ,OArBIZ,IAAOA,EAAIa,UACXD,EAAcZ,EAAIa,QAAQZ,IAG9BW,EAAclB,EAA4BkB,GAC1CR,EAAOS,QAAQV,EAAMF,EAAMW,GAExBA,EAAYf,eACXL,EAAOgB,IAAI,UAAWG,EAAUR,GAChCV,EAAGI,cAAcK,EAAeD,IAC3BD,GACLP,EAAGqB,MAAMC,QAAQC,IAAIf,EAAMgB,GAAuBC,MAAMlB,IAG5DI,EAAOe,gBAAgBhB,EAAMF,EAAMW,GAE/BZ,GAAOA,EAAImB,iBACXnB,EAAImB,gBAAgBlB,GAGxBR,EAAGqB,MAAMC,QAAQC,IAAIf,EAAMmB,EAAuBR,GAC3CA,EACT,MAAOS,GACLA,EAAEC,QAAUD,EAAEC,QAAU,YAAcX,EAAW,gBAAkBnB,EAAO+B,YAAYpB,GAClFC,EAAOC,cACPb,EAAOc,MAAMe,GAEb7B,EAAOgB,IAAIa,EAAEC,UAzEzB,GAAIlB,GACAG,EAA0B,mCAC1BG,EAAwB,uBACxBU,EAAwB,+BACxBH,EAAsB,uBA8E1B,OAAOb,IAQHS,QAASrB,EAAOgC,KAQhBL,gBAAiB3B,EAAOgC,KAMxBnB,eAAe,EAOfoB,sBAAsB,SAASxB,GAC3B,MAAOR,GAAGqB,MAAMC,QAAQW,IAAIzB,EAAMmB,IAUtCO,YAAa,SAASC,EAAgB3B,EAAMD,EAAK6B,GAK7C,MAJI7B,IAAO4B,IACPA,EAAiBA,EAAeE,mBAAmB9B,EAA2B,gBAAhB,GAA2B6B,EAAY,OAGlG9B,EAAOC,EAAKC,EAAM2B,EAAgB5B,IAAQ4B,EAAiBA,EAAeV,MAAQ,QAQ7Fa,KAAM,SAAS/B,EAAKC,GAChB,MAAOF,GAAOC,EAAKC,EAAMD,EAAKA","file":"../../durandal/binder.js","sourcesContent":["/**\r\n * Durandal 2.2.0 Copyright (c) 2010-2016 Blue Spire Consulting, Inc. All Rights Reserved.\r\n * Available via the MIT license.\r\n * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.\r\n */\r\n/**\r\n * The binder joins an object instance and a DOM element tree by applying databinding and/or invoking binding lifecycle callbacks (binding and bindingComplete).\r\n * @module binder\r\n * @requires system\r\n * @requires knockout\r\n */\r\ndefine(['durandal/system', 'knockout'], function (system, ko) {\r\n    var binder,\r\n        insufficientInfoMessage = 'Insufficient Information to Bind',\r\n        unexpectedViewMessage = 'Unexpected View Type',\r\n        bindingInstructionKey = 'durandal-binding-instruction',\r\n        koBindingContextKey = '__ko_bindingContext__';\r\n\r\n    function normalizeBindingInstruction(result){\r\n        if(result === undefined){\r\n            return { applyBindings: true };\r\n        }\r\n\r\n        if(system.isBoolean(result)){\r\n            return { applyBindings:result };\r\n        }\r\n\r\n        if(result.applyBindings === undefined){\r\n            result.applyBindings = true;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function doBind(obj, view, bindingTarget, data){\r\n        if (!view || !bindingTarget) {\r\n            if (binder.throwOnErrors) {\r\n                system.error(insufficientInfoMessage);\r\n            } else {\r\n                system.log(insufficientInfoMessage, view, data);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (!view.getAttribute) {\r\n            if (binder.throwOnErrors) {\r\n                system.error(unexpectedViewMessage);\r\n            } else {\r\n                system.log(unexpectedViewMessage, view, data);\r\n            }\r\n            return;\r\n        }\r\n\r\n        var viewName = view.getAttribute('data-view');\r\n\r\n        try {\r\n            var instruction;\r\n\r\n            if (obj && obj.binding) {\r\n                instruction = obj.binding(view);\r\n            }\r\n\r\n            instruction = normalizeBindingInstruction(instruction);\r\n            binder.binding(data, view, instruction);\r\n\r\n            if(instruction.applyBindings){\r\n                system.log('Binding', viewName, data);\r\n                ko.applyBindings(bindingTarget, view);\r\n            }else if(obj){\r\n                ko.utils.domData.set(view, koBindingContextKey, { $data:obj });\r\n            }\r\n\r\n            binder.bindingComplete(data, view, instruction);\r\n\r\n            if (obj && obj.bindingComplete) {\r\n                obj.bindingComplete(view);\r\n            }\r\n\r\n            ko.utils.domData.set(view, bindingInstructionKey, instruction);\r\n            return instruction;\r\n        } catch (e) {\r\n            e.message = e.message + ';\\nView: ' + viewName + \";\\nModuleId: \" + system.getModuleId(data);\r\n            if (binder.throwOnErrors) {\r\n                system.error(e);\r\n            } else {\r\n                system.log(e.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @class BinderModule\r\n     * @static\r\n     */\r\n    return binder = {\r\n        /**\r\n         * Called before every binding operation. Does nothing by default.\r\n         * @method binding\r\n         * @param {object} data The data that is about to be bound.\r\n         * @param {DOMElement} view The view that is about to be bound.\r\n         * @param {object} instruction The object that carries the binding instructions.\r\n         */\r\n        binding: system.noop,\r\n        /**\r\n         * Called after every binding operation. Does nothing by default.\r\n         * @method bindingComplete\r\n         * @param {object} data The data that has just been bound.\r\n         * @param {DOMElement} view The view that has just been bound.\r\n         * @param {object} instruction The object that carries the binding instructions.\r\n         */\r\n        bindingComplete: system.noop,\r\n        /**\r\n         * Indicates whether or not the binding system should throw errors or not.\r\n         * @property {boolean} throwOnErrors\r\n         * @default false The binding system will not throw errors by default. Instead it will log them.\r\n         */\r\n        throwOnErrors: false,\r\n        /**\r\n         * Gets the binding instruction that was associated with a view when it was bound.\r\n         * @method getBindingInstruction\r\n         * @param {DOMElement} view The view that was previously bound.\r\n         * @return {object} The object that carries the binding instructions.\r\n         */\r\n        getBindingInstruction:function(view){\r\n            return ko.utils.domData.get(view, bindingInstructionKey);\r\n        },\r\n        /**\r\n         * Binds the view, preserving the existing binding context. Optionally, a new context can be created, parented to the previous context.\r\n         * @method bindContext\r\n         * @param {KnockoutBindingContext} bindingContext The current binding context.\r\n         * @param {DOMElement} view The view to bind.\r\n         * @param {object} [obj] The data to bind to, causing the creation of a child binding context if present.\r\n         * @param {string} [dataAlias] An alias for $data if present.\r\n         */\r\n        bindContext: function(bindingContext, view, obj, dataAlias) {\r\n            if (obj && bindingContext) {\r\n                bindingContext = bindingContext.createChildContext(obj, typeof(dataAlias) === 'string' ? dataAlias : null);\r\n            }\r\n\r\n            return doBind(obj, view, bindingContext, obj || (bindingContext ? bindingContext.$data : null));\r\n        },\r\n        /**\r\n         * Binds the view, preserving the existing binding context. Optionally, a new context can be created, parented to the previous context.\r\n         * @method bind\r\n         * @param {object} obj The data to bind to.\r\n         * @param {DOMElement} view The view to bind.\r\n         */\r\n        bind: function(obj, view) {\r\n            return doBind(obj, view, obj, obj);\r\n        }\r\n    };\r\n});\r\n"]}