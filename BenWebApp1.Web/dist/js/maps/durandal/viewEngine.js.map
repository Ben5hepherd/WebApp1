{"version":3,"sources":["durandal/viewEngine.js"],"names":["define","system","$","parseMarkup","parseHTML","html","get","cache","viewExtension","viewPlugin","viewPluginParameters","isViewUrl","url","indexOf","this","length","convertViewUrlToViewId","substring","convertViewIdToRequirePath","viewId","plugin","processMarkup","markup","allElements","ensureSingleElement","withoutCommentsOrEmptyText","i","current","nodeType","result","test","nodeValue","push","wrapAll","parent","tryGetViewFromCache","id","putViewInCache","view","createView","that","requirePath","existing","defer","dfd","resolve","cloneNode","promise","acquire","then","element","setAttribute","fail","err","createFallbackView","message"],"mappings":"AAWAA,QAAQ,kBAAmB,UAAW,SAAUC,EAAQC,GACpD,GAAIC,EAgBJ,OAbIA,GADAD,EAAEE,UACY,SAAUC,GACpB,MAAOH,GAAEE,UAAUC,IAGT,SAAUA,GACpB,MAAOH,GAAEG,GAAMC,QASnBC,SAMAC,cAAe,QAMfC,WAAY,OAMZC,qBAAsB,GAOtBC,UAAW,SAAUC,GACjB,MAAOA,GAAIC,QAAQC,KAAKN,cAAeI,EAAIG,OAASD,KAAKN,cAAcO,cAQ3EC,uBAAwB,SAAUJ,GAC9B,MAAOA,GAAIK,UAAU,EAAGL,EAAIG,OAASD,KAAKN,cAAcO,SAQ5DG,2BAA4B,SAAUC,GAClC,GAAIC,GAASN,KAAKL,WAAaK,KAAKL,WAAa,IAAM,EACvD,OAAOW,GAASD,EAASL,KAAKN,cAAgBM,KAAKJ,sBAQvDP,YAAaA,EAObkB,cAAe,SAAUC,GACrB,GAAIC,GAAcT,KAAKX,YAAYmB,EACnC,OAAOR,MAAKU,oBAAoBD,IAQpCC,oBAAoB,SAASD,GACzB,GAAKA,GAEE,GAA0B,GAAtBA,EAAYR,OACnB,MAAOQ,GAAY,OAFnBrB,GAAE,eAAe,EAOrB,KAAK,GAFDuB,MAEKC,EAAI,EAAGA,EAAIH,EAAYR,OAAQW,IAAK,CACzC,GAAIC,GAAUJ,EAAYG,EAC1B,IAAwB,GAApBC,EAAQC,SAAe,CACvB,GAAwB,GAApBD,EAAQC,SAAe,CACvB,GAAIC,GAAS,KAAKC,KAAKH,EAAQI,UAC/B,KAAKF,EACD,SAIRJ,EAA2BO,KAAKL,IAIxC,MAAIF,GAA2BV,OAAS,EAC7Bb,EAAEuB,GAA4BQ,QAAQ,wCAAwCC,SAAS5B,IAAI,GAG/FmB,EAA2B,IAQtCU,oBAAoB,SAASC,GACzB,MAAOtB,MAAKP,MAAM6B,IAQtBC,eAAgB,SAAUD,EAAIE,GAC1BxB,KAAKP,MAAM6B,GAAME,GAQrBC,WAAY,SAASpB,GACjB,GAAIqB,GAAO1B,KACP2B,EAAc3B,KAAKI,2BAA2BC,GAC9CuB,EAAW5B,KAAKqB,oBAAoBM,EAExC,OAAIC,GACOzC,EAAO0C,MAAM,SAASC,GACzBA,EAAIC,QAAQH,EAASI,WAAU,MAChCC,UAGA9C,EAAO0C,MAAM,SAASC,GACzB3C,EAAO+C,QAAQP,GAAaQ,KAAK,SAAS3B,GACtC,GAAI4B,GAAUV,EAAKnB,cAAcC,EACjC4B,GAAQC,aAAa,YAAahC,GAClCqB,EAAKH,eAAeI,EAAaS,GACjCN,EAAIC,QAAQK,EAAQJ,WAAU,MAC/BM,KAAK,SAASC,GACbb,EAAKc,mBAAmBnC,EAAQsB,EAAaY,GAAKJ,KAAK,SAASC,GAC5DA,EAAQC,aAAa,YAAahC,GAClCqB,EAAKjC,MAAMkC,GAAeS,EAC1BN,EAAIC,QAAQK,EAAQJ,WAAU,UAGvCC,WAUPO,mBAAoB,SAAUnC,EAAQsB,EAAaY,GAC/C,GAAIb,GAAO1B,KACPyC,EAAU,iCAAmCpC,EAAS,eAAiBsB,EAAc,IAEzF,OAAOxC,GAAO0C,MAAM,SAASC,GACzBA,EAAIC,QAAQL,EAAKnB,cAAc,kCAAoCkC,EAAU,aAC9ER","file":"../../durandal/viewEngine.js","sourcesContent":["/**\r\n * Durandal 2.2.0 Copyright (c) 2010-2016 Blue Spire Consulting, Inc. All Rights Reserved.\r\n * Available via the MIT license.\r\n * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.\r\n */\r\n/**\r\n * The viewEngine module provides information to the viewLocator module which is used to locate the view's source file. The viewEngine also transforms a view id into a view instance.\r\n * @module viewEngine\r\n * @requires system\r\n * @requires jquery\r\n */\r\ndefine(['durandal/system', 'jquery'], function (system, $) {\r\n    var parseMarkup;\r\n\r\n    if ($.parseHTML) {\r\n        parseMarkup = function (html) {\r\n            return $.parseHTML(html);\r\n        };\r\n    } else {\r\n        parseMarkup = function (html) {\r\n            return $(html).get();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @class ViewEngineModule\r\n     * @static\r\n     */\r\n    return {\r\n        cache:{},\r\n        /**\r\n         * The file extension that view source files are expected to have.\r\n         * @property {string} viewExtension\r\n         * @default .html\r\n         */\r\n        viewExtension: '.html',\r\n        /**\r\n         * The name of the RequireJS loader plugin used by the viewLocator to obtain the view source. (Use requirejs to map the plugin's full path).\r\n         * @property {string} viewPlugin\r\n         * @default text\r\n         */\r\n        viewPlugin: 'text',\r\n        /**\r\n         * Parameters passed to the RequireJS loader plugin used by the viewLocator to obtain the view source.\r\n         * @property {string} viewPluginParameters\r\n         * @default The empty string by default.\r\n         */\r\n        viewPluginParameters: '',\r\n        /**\r\n         * Determines if the url is a url for a view, according to the view engine.\r\n         * @method isViewUrl\r\n         * @param {string} url The potential view url.\r\n         * @return {boolean} True if the url is a view url, false otherwise.\r\n         */\r\n        isViewUrl: function (url) {\r\n            return url.indexOf(this.viewExtension, url.length - this.viewExtension.length) !== -1;\r\n        },\r\n        /**\r\n         * Converts a view url into a view id.\r\n         * @method convertViewUrlToViewId\r\n         * @param {string} url The url to convert.\r\n         * @return {string} The view id.\r\n         */\r\n        convertViewUrlToViewId: function (url) {\r\n            return url.substring(0, url.length - this.viewExtension.length);\r\n        },\r\n        /**\r\n         * Converts a view id into a full RequireJS path.\r\n         * @method convertViewIdToRequirePath\r\n         * @param {string} viewId The view id to convert.\r\n         * @return {string} The require path.\r\n         */\r\n        convertViewIdToRequirePath: function (viewId) {\r\n            var plugin = this.viewPlugin ? this.viewPlugin + '!' : '';\r\n            return plugin + viewId + this.viewExtension + this.viewPluginParameters;\r\n        },\r\n        /**\r\n         * Parses the view engine recognized markup and returns DOM elements.\r\n         * @method parseMarkup\r\n         * @param {string} markup The markup to parse.\r\n         * @return {DOMElement[]} The elements.\r\n         */\r\n        parseMarkup: parseMarkup,\r\n        /**\r\n         * Calls `parseMarkup` and then pipes the results through `ensureSingleElement`.\r\n         * @method processMarkup\r\n         * @param {string} markup The markup to process.\r\n         * @return {DOMElement} The view.\r\n         */\r\n        processMarkup: function (markup) {\r\n            var allElements = this.parseMarkup(markup);\r\n            return this.ensureSingleElement(allElements);\r\n        },\r\n        /**\r\n         * Converts an array of elements into a single element. White space and comments are removed. If a single element does not remain, then the elements are wrapped.\r\n         * @method ensureSingleElement\r\n         * @param {DOMElement[]} allElements The elements.\r\n         * @return {DOMElement} A single element.\r\n         */\r\n        ensureSingleElement:function(allElements){\r\n            if (!allElements) { \r\n                $('<div></div>')[0];\r\n            } else if (allElements.length == 1) {\r\n                return allElements[0];\r\n            }\r\n\r\n            var withoutCommentsOrEmptyText = [];\r\n\r\n            for (var i = 0; i < allElements.length; i++) {\r\n                var current = allElements[i];\r\n                if (current.nodeType != 8) {\r\n                    if (current.nodeType == 3) {\r\n                        var result = /\\S/.test(current.nodeValue);\r\n                        if (!result) {\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    withoutCommentsOrEmptyText.push(current);\r\n                }\r\n            }\r\n\r\n            if (withoutCommentsOrEmptyText.length > 1) {\r\n                return $(withoutCommentsOrEmptyText).wrapAll('<div class=\"durandal-wrapper\"></div>').parent().get(0);\r\n            }\r\n\r\n            return withoutCommentsOrEmptyText[0];\r\n        },\r\n        /**\r\n         * Gets the view associated with the id from the cache of parsed views.\r\n         * @method tryGetViewFromCache\r\n         * @param {string} id The view id to lookup in the cache.\r\n         * @return {DOMElement|null} The cached view or null if it's not in the cache.\r\n         */\r\n        tryGetViewFromCache:function(id) {\r\n            return this.cache[id];\r\n        },\r\n        /**\r\n         * Puts the view associated with the id into the cache of parsed views.\r\n         * @method putViewInCache\r\n         * @param {string} id The view id whose view should be cached.\r\n         * @param {DOMElement} view The view to cache.\r\n         */\r\n        putViewInCache: function (id, view) {\r\n            this.cache[id] = view;\r\n        },\r\n        /**\r\n         * Creates the view associated with the view id.\r\n         * @method createView\r\n         * @param {string} viewId The view id whose view should be created.\r\n         * @return {Promise} A promise of the view.\r\n         */\r\n        createView: function(viewId) {\r\n            var that = this;\r\n            var requirePath = this.convertViewIdToRequirePath(viewId);\r\n            var existing = this.tryGetViewFromCache(requirePath);\r\n\r\n            if (existing) {\r\n                return system.defer(function(dfd) {\r\n                    dfd.resolve(existing.cloneNode(true));\r\n                }).promise();\r\n            }\r\n\r\n            return system.defer(function(dfd) {\r\n                system.acquire(requirePath).then(function(markup) {\r\n                    var element = that.processMarkup(markup);\r\n                    element.setAttribute('data-view', viewId);\r\n                    that.putViewInCache(requirePath, element);\r\n                    dfd.resolve(element.cloneNode(true));\r\n                }).fail(function(err) {\r\n                    that.createFallbackView(viewId, requirePath, err).then(function(element) {\r\n                        element.setAttribute('data-view', viewId);\r\n                        that.cache[requirePath] = element;\r\n                        dfd.resolve(element.cloneNode(true));\r\n                    });\r\n                });\r\n            }).promise();\r\n        },\r\n        /**\r\n         * Called when a view cannot be found to provide the opportunity to locate or generate a fallback view. Mainly used to ease development.\r\n         * @method createFallbackView\r\n         * @param {string} viewId The view id whose view should be created.\r\n         * @param {string} requirePath The require path that was attempted.\r\n         * @param {Error} requirePath The error that was returned from the attempt to locate the default view.\r\n         * @return {Promise} A promise for the fallback view.\r\n         */\r\n        createFallbackView: function (viewId, requirePath, err) {\r\n            var that = this,\r\n                message = 'View Not Found. Searched for \"' + viewId + '\" via path \"' + requirePath + '\".';\r\n\r\n            return system.defer(function(dfd) {\r\n                dfd.resolve(that.processMarkup('<div class=\"durandal-view-404\">' + message + '</div>'));\r\n            }).promise();\r\n        }\r\n    };\r\n});\r\n"]}