{"version":3,"sources":["durandal/events.js"],"names":["define","system","eventSplitter","Events","Subscription","owner","events","this","prototype","then","callback","context","on","off","calls","event","list","callbacks","split","shift","push","i","keys","length","splice","trigger","args","all","rest","arguments","slice","apply","concat","proxy","that","arg","includeIn","targetObject"],"mappings":"AAWAA,QAAQ,mBAAoB,SAAUC,GAClC,GAAIC,GAAgB,MAChBC,EAAS,aAMTC,EAAe,SAASC,EAAOC,GAC/BC,KAAKF,MAAQA,EACbE,KAAKD,OAASA,EAiMlB,OAvLAF,GAAaI,UAAUC,KAAO,SAAUC,EAAUC,GAI9C,MAHAJ,MAAKG,SAAWA,GAAYH,KAAKG,SACjCH,KAAKI,QAAUA,GAAWJ,KAAKI,QAE1BJ,KAAKG,UAIVH,KAAKF,MAAMO,GAAGL,KAAKD,OAAQC,KAAKG,SAAUH,KAAKI,SACxCJ,MAJIA,MAcfH,EAAaI,UAAUI,GAAKR,EAAaI,UAAUC,KAOnDL,EAAaI,UAAUK,IAAM,WAEzB,MADAN,MAAKF,MAAMQ,IAAIN,KAAKD,OAAQC,KAAKG,SAAUH,KAAKI,SACzCJ,MAgBXJ,EAAOK,UAAUI,GAAK,SAASN,EAAQI,EAAUC,GAC7C,GAAIG,GAAOC,EAAOC,CAElB,IAAKN,EAEE,CAIH,IAHAI,EAAQP,KAAKU,YAAcV,KAAKU,cAChCX,EAASA,EAAOY,MAAMhB,GAEfa,EAAQT,EAAOa,SAClBH,EAAOF,EAAMC,KAAWD,EAAMC,OAC9BC,EAAKI,KAAKV,EAAUC,EAGxB,OAAOJ,MAVP,MAAO,IAAIH,GAAaG,KAAMD,IAsBtCH,EAAOK,UAAUK,IAAM,SAASP,EAAQI,EAAUC,GAC9C,GAAII,GAAOD,EAAOE,EAAMK,CAGxB,MAAMP,EAAQP,KAAKU,WACf,MAAOV,KAIX,MAAMD,GAAUI,GAAYC,GAExB,aADOJ,MAAKU,UACLV,IAMX,KAHAD,EAASA,EAASA,EAAOY,MAAMhB,GAAiBD,EAAOqB,KAAKR,GAGrDC,EAAQT,EAAOa,SAClB,IAAMH,EAAOF,EAAMC,MAAaL,GAAYC,GAK5C,IAAKU,EAAIL,EAAKO,OAAS,EAAGF,GAAK,EAAGA,GAAK,EAC7BX,GAAYM,EAAKK,KAAOX,GAAYC,GAAWK,EAAKK,EAAI,KAAOV,GACjEK,EAAKQ,OAAOH,EAAG,cANZP,GAAMC,EAWrB,OAAOR,OASXJ,EAAOK,UAAUiB,QAAU,SAASnB,GAChC,GAAIS,GAAOD,EAAOE,EAAMK,EAAGE,EAAQG,EAAMC,EAAKC,CAC9C,MAAMd,EAAQP,KAAKU,WACf,MAAOV,KAKX,KAFAqB,KACAtB,EAASA,EAAOY,MAAMhB,GACjBmB,EAAI,EAAGE,EAASM,UAAUN,OAAQF,EAAIE,EAAQF,IAC/CO,EAAKP,EAAI,GAAKQ,UAAUR,EAK5B,MAAON,EAAQT,EAAOa,SAAS,CAW3B,IATIQ,EAAMb,EAAMa,OACZA,EAAMA,EAAIG,UAGVd,EAAOF,EAAMC,MACbC,EAAOA,EAAKc,SAIZd,EACA,IAAKK,EAAI,EAAGE,EAASP,EAAKO,OAAQF,EAAIE,EAAQF,GAAK,EAC/CL,EAAKK,GAAGU,MAAMf,EAAKK,EAAI,IAAMd,KAAMqB,EAK3C,IAAID,EAEA,IADAD,GAAQX,GAAOiB,OAAOJ,GACjBP,EAAI,EAAGE,EAASI,EAAIJ,OAAQF,EAAIE,EAAQF,GAAK,EAC9CM,EAAIN,GAAGU,MAAMJ,EAAIN,EAAI,IAAMd,KAAMmB,GAK7C,MAAOnB,OASXJ,EAAOK,UAAUyB,MAAQ,SAAS3B,GAC9B,GAAI4B,GAAO3B,IACX,OAAO,UAAU4B,GACbD,EAAKT,QAAQnB,EAAQ6B,KAe7BhC,EAAOiC,UAAY,SAASC,GACxBA,EAAazB,GAAKT,EAAOK,UAAUI,GACnCyB,EAAaxB,IAAMV,EAAOK,UAAUK,IACpCwB,EAAaZ,QAAUtB,EAAOK,UAAUiB,QACxCY,EAAaJ,MAAQ9B,EAAOK,UAAUyB,OAGnC9B","file":"../../durandal/events.js","sourcesContent":["/**\r\n * Durandal 2.2.0 Copyright (c) 2010-2016 Blue Spire Consulting, Inc. All Rights Reserved.\r\n * Available via the MIT license.\r\n * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.\r\n */\r\n/**\r\n * Durandal events originate from backbone.js but also combine some ideas from signals.js as well as some additional improvements.\r\n * Events can be installed into any object and are installed into the `app` module by default for convenient app-wide eventing.\r\n * @module events\r\n * @requires system\r\n */\r\ndefine(['durandal/system'], function (system) {\r\n    var eventSplitter = /\\s+/;\r\n    var Events = function() { };\r\n\r\n    /**\r\n     * Represents an event subscription.\r\n     * @class Subscription\r\n     */\r\n    var Subscription = function(owner, events) {\r\n        this.owner = owner;\r\n        this.events = events;\r\n    };\r\n\r\n    /**\r\n     * Attaches a callback to the event subscription.\r\n     * @method then\r\n     * @param {function} callback The callback function to invoke when the event is triggered.\r\n     * @param {object} [context] An object to use as `this` when invoking the `callback`.\r\n     * @chainable\r\n     */\r\n    Subscription.prototype.then = function (callback, context) {\r\n        this.callback = callback || this.callback;\r\n        this.context = context || this.context;\r\n        \r\n        if (!this.callback) {\r\n            return this;\r\n        }\r\n\r\n        this.owner.on(this.events, this.callback, this.context);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Attaches a callback to the event subscription.\r\n     * @method on\r\n     * @param {function} [callback] The callback function to invoke when the event is triggered. If `callback` is not provided, the previous callback will be re-activated.\r\n     * @param {object} [context] An object to use as `this` when invoking the `callback`.\r\n     * @chainable\r\n     */\r\n    Subscription.prototype.on = Subscription.prototype.then;\r\n\r\n    /**\r\n     * Cancels the subscription.\r\n     * @method off\r\n     * @chainable\r\n     */\r\n    Subscription.prototype.off = function () {\r\n        this.owner.off(this.events, this.callback, this.context);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Creates an object with eventing capabilities.\r\n     * @class Events\r\n     */\r\n\r\n    /**\r\n     * Creates a subscription or registers a callback for the specified event.\r\n     * @method on\r\n     * @param {string} events One or more events, separated by white space.\r\n     * @param {function} [callback] The callback function to invoke when the event is triggered. If `callback` is not provided, a subscription instance is returned.\r\n     * @param {object} [context] An object to use as `this` when invoking the `callback`.\r\n     * @return {Subscription|Events} A subscription is returned if no callback is supplied, otherwise the events object is returned for chaining.\r\n     */\r\n    Events.prototype.on = function(events, callback, context) {\r\n        var calls, event, list;\r\n\r\n        if (!callback) {\r\n            return new Subscription(this, events);\r\n        } else {\r\n            calls = this.callbacks || (this.callbacks = {});\r\n            events = events.split(eventSplitter);\r\n\r\n            while (event = events.shift()) {\r\n                list = calls[event] || (calls[event] = []);\r\n                list.push(callback, context);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Removes the callbacks for the specified events.\r\n     * @method off\r\n     * @param {string} [events] One or more events, separated by white space to turn off. If no events are specified, then the callbacks will be removed.\r\n     * @param {function} [callback] The callback function to remove. If `callback` is not provided, all callbacks for the specified events will be removed.\r\n     * @param {object} [context] The object that was used as `this`. Callbacks with this context will be removed.\r\n     * @chainable\r\n     */\r\n    Events.prototype.off = function(events, callback, context) {\r\n        var event, calls, list, i;\r\n\r\n        // No events\r\n        if (!(calls = this.callbacks)) {\r\n            return this;\r\n        }\r\n\r\n        //removing all\r\n        if (!(events || callback || context)) {\r\n            delete this.callbacks;\r\n            return this;\r\n        }\r\n\r\n        events = events ? events.split(eventSplitter) : system.keys(calls);\r\n\r\n        // Loop through the callback list, splicing where appropriate.\r\n        while (event = events.shift()) {\r\n            if (!(list = calls[event]) || !(callback || context)) {\r\n                delete calls[event];\r\n                continue;\r\n            }\r\n\r\n            for (i = list.length - 2; i >= 0; i -= 2) {\r\n                if (!(callback && list[i] !== callback || context && list[i + 1] !== context)) {\r\n                    list.splice(i, 2);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Triggers the specified events.\r\n     * @method trigger\r\n     * @param {string} [events] One or more events, separated by white space to trigger.\r\n     * @chainable\r\n     */\r\n    Events.prototype.trigger = function(events) {\r\n        var event, calls, list, i, length, args, all, rest;\r\n        if (!(calls = this.callbacks)) {\r\n            return this;\r\n        }\r\n\r\n        rest = [];\r\n        events = events.split(eventSplitter);\r\n        for (i = 1, length = arguments.length; i < length; i++) {\r\n            rest[i - 1] = arguments[i];\r\n        }\r\n\r\n        // For each event, walk through the list of callbacks twice, first to\r\n        // trigger the event, then to trigger any `\"all\"` callbacks.\r\n        while (event = events.shift()) {\r\n            // Copy callback lists to prevent modification.\r\n            if (all = calls.all) {\r\n                all = all.slice();\r\n            }\r\n\r\n            if (list = calls[event]) {\r\n                list = list.slice();\r\n            }\r\n\r\n            // Execute event callbacks.\r\n            if (list) {\r\n                for (i = 0, length = list.length; i < length; i += 2) {\r\n                    list[i].apply(list[i + 1] || this, rest);\r\n                }\r\n            }\r\n\r\n            // Execute \"all\" callbacks.\r\n            if (all) {\r\n                args = [event].concat(rest);\r\n                for (i = 0, length = all.length; i < length; i += 2) {\r\n                    all[i].apply(all[i + 1] || this, args);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Creates a function that will trigger the specified events when called. Simplifies proxying jQuery (or other) events through to the events object.\r\n     * @method proxy\r\n     * @param {string} events One or more events, separated by white space to trigger by invoking the returned function.\r\n     * @return {function} Calling the function will invoke the previously specified events on the events object.\r\n     */\r\n    Events.prototype.proxy = function(events) {\r\n        var that = this;\r\n        return (function(arg) {\r\n            that.trigger(events, arg);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates an object with eventing capabilities.\r\n     * @class EventsModule\r\n     * @static\r\n     */\r\n\r\n    /**\r\n     * Adds eventing capabilities to the specified object.\r\n     * @method includeIn\r\n     * @param {object} targetObject The object to add eventing capabilities to.\r\n     */\r\n    Events.includeIn = function(targetObject) {\r\n        targetObject.on = Events.prototype.on;\r\n        targetObject.off = Events.prototype.off;\r\n        targetObject.trigger = Events.prototype.trigger;\r\n        targetObject.proxy = Events.prototype.proxy;\r\n    };\r\n\r\n    return Events;\r\n});\r\n"]}