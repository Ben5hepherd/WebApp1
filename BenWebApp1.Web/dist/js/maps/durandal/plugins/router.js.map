{"version":3,"sources":["durandal/plugins/router.js"],"names":["define","system","app","activator","events","composition","history","ko","$","routeStringToRegExp","routeString","replace","escapeRegExp","optionalParam","namedParam","match","optional","splatParam","RegExp","routesAreCaseSensitive","undefined","stripParametersFromRoute","route","colonIndex","indexOf","length","substring","endsWith","str","suffix","compareArrays","first","second","i","len","reconstructUrl","instruction","queryString","fragment","startDeferred","rootRouter","trailingSlash","lastUrl","lastTryUrl","createRouter","hasChildRouter","instance","parentRouter","router","parent","setCurrentInstructionRouteIsActive","flag","currentInstruction","config","isActive","completeNavigation","mode","log","fromModuleId","getModuleId","currentActivation","trigger","toModuleId","updateDocumentTitle","explicitNavigation","navigatingBack","cancelNavigation","activeInstruction","navigate","isProcessing","redirect","url","activateRoute","options","canDeactivate","activateItem","params","then","succeeded","previousActivation","withChild","fullFragment","loadUrl","attached","compositionComplete","settings","lifecycleData","resolve","fail","err","error","handleGuardedRoute","resultOrPromise","guardRoute","result","isString","ensureActivation","canReuseCurrentActivation","moduleId","canReuseForRoute","apply","dequeueInstruction","queue","shift","tempActivator","create","forceActiveItem","areSameItem","activeItem","findChildActivator","acquire","m","resolveObject","viewUrl","message","queueInstruction","unshift","createParams","routePattern","exec","slice","current","decodeURIComponent","queryParams","parseQueryString","push","configureRoute","isRegExp","title","convertRouteToTitle","convertRouteToModuleId","hash","convertRouteToHash","hasChildRoutes","observable","routes","paramInfo","mapRoute","isArray","extend","nav","setTitle","value","appTitle","unwrap","document","handlers","navigationModel","observableArray","isNavigating","computed","processing","currentRouterIsProcesing","__router__","includeIn","currentItem","newItem","currentActivationData","newActivationData","item","queryObject","pairs","split","pair","sp","key","substr","existing","callback","coreFragment","queryIndex","relativeToParentRouter","this","join","charAt","test","titleSubscription","isObservable","subscribe","dispose","window","location","href","isBoolean","isObject","navigateBack","_hasPushState","toUpperCase","map","buildNavigationModel","defaultOrder","fallbackOrder","isNumber","sort","a","b","mapUnknownRoutes","replaceRoute","catchAllRoute","catchAllPattern","isFunction","reset","off","makeRelative","fromParent","on","dynamicHash","childRouter","createChildRouter","makeRoutesCaseSensitive","targetIsThisWindow","event","targetWindow","target","attr","name","top","activate","defer","dfd","routeHandler","rootStripper","root","delegate","evt","isDefaultPrevented","altKey","ctrlKey","metaKey","shiftKey","preventDefault","silent","promise","deactivate","install","bindingHandlers","init","controlsDescendantBindings","update","element","valueAccessor","allBindingsAccessor","viewModel","bindingContext","utils","unwrapObservable","model","theRouter","compose","virtualElements","allowedBindings"],"mappings":"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","file":"../../../durandal/plugins/router.js","sourcesContent":["/**\r\n * Durandal 2.2.0 Copyright (c) 2010-2016 Blue Spire Consulting, Inc. All Rights Reserved.\r\n * Available via the MIT license.\r\n * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.\r\n */\r\n/**\r\n * Connects the history module's url and history tracking support to Durandal's activation and composition engine allowing you to easily build navigation-style applications.\r\n * @module router\r\n * @requires system\r\n * @requires app\r\n * @requires activator\r\n * @requires events\r\n * @requires composition\r\n * @requires history\r\n * @requires knockout\r\n * @requires jquery\r\n */\r\ndefine(['durandal/system', 'durandal/app', 'durandal/activator', 'durandal/events', 'durandal/composition', 'plugins/history', 'knockout', 'jquery'], function(system, app, activator, events, composition, history, ko, $) {\r\n    var optionalParam = /\\((.*?)\\)/g;\r\n    var namedParam = /(\\(\\?)?:\\w+/g;\r\n    var splatParam = /\\*\\w+/g;\r\n    var escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\r\n    var startDeferred, rootRouter;\r\n    var trailingSlash = /\\/$/;\r\n    var routesAreCaseSensitive = false;\r\n    var lastUrl = '/', lastTryUrl = '/';\r\n\r\n    function routeStringToRegExp(routeString) {\r\n        routeString = routeString.replace(escapeRegExp, '\\\\$&')\r\n            .replace(optionalParam, '(?:$1)?')\r\n            .replace(namedParam, function(match, optional) {\r\n                return optional ? match : '([^\\/]+)';\r\n            })\r\n            .replace(splatParam, '(.*?)');\r\n\r\n        return new RegExp('^' + routeString + '$', routesAreCaseSensitive ? undefined : 'i');\r\n    }\r\n\r\n    function stripParametersFromRoute(route) {\r\n        var colonIndex = route.indexOf(':');\r\n        var length = colonIndex > 0 ? colonIndex - 1 : route.length;\r\n        return route.substring(0, length);\r\n    }\r\n\r\n    function endsWith(str, suffix) {\r\n        return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n    }\r\n\r\n    function compareArrays(first, second) {\r\n        if (!first || !second){\r\n            return false;\r\n        }\r\n\r\n        if (first.length != second.length) {\r\n            return false;\r\n        }\r\n\r\n        for (var i = 0, len = first.length; i < len; i++) {\r\n            if (first[i] != second[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function reconstructUrl(instruction){\r\n        if(!instruction.queryString){\r\n            return instruction.fragment;\r\n        }\r\n\r\n        return instruction.fragment + '?' + instruction.queryString;\r\n    }\r\n\r\n    /**\r\n     * @class Router\r\n     * @uses Events\r\n     */\r\n\r\n    /**\r\n     * Triggered when the navigation logic has completed.\r\n     * @event router:navigation:complete\r\n     * @param {object} instance The activated instance.\r\n     * @param {object} instruction The routing instruction.\r\n     * @param {Router} router The router.\r\n     */\r\n\r\n    /**\r\n     * Triggered when the navigation has been cancelled.\r\n     * @event router:navigation:cancelled\r\n     * @param {object} instance The activated instance.\r\n     * @param {object} instruction The routing instruction.\r\n     * @param {Router} router The router.\r\n     */\r\n\r\n    /**\r\n     * Triggered when navigation begins.\r\n     * @event router:navigation:processing\r\n     * @param {object} instruction The routing instruction.\r\n     * @param {Router} router The router.\r\n     */\r\n\r\n    /**\r\n     * Triggered right before a route is activated.\r\n     * @event router:route:activating\r\n     * @param {object} instance The activated instance.\r\n     * @param {object} instruction The routing instruction.\r\n     * @param {Router} router The router.\r\n     */\r\n\r\n    /**\r\n     * Triggered right before a route is configured.\r\n     * @event router:route:before-config\r\n     * @param {object} config The route config.\r\n     * @param {Router} router The router.\r\n     */\r\n\r\n    /**\r\n     * Triggered just after a route is configured.\r\n     * @event router:route:after-config\r\n     * @param {object} config The route config.\r\n     * @param {Router} router The router.\r\n     */\r\n\r\n    /**\r\n     * Triggered when the view for the activated instance is attached.\r\n     * @event router:navigation:attached\r\n     * @param {object} instance The activated instance.\r\n     * @param {object} instruction The routing instruction.\r\n     * @param {Router} router The router.\r\n     */\r\n\r\n    /**\r\n     * Triggered when the composition that the activated instance participates in is complete.\r\n     * @event router:navigation:composition-complete\r\n     * @param {object} instance The activated instance.\r\n     * @param {object} instruction The routing instruction.\r\n     * @param {Router} router The router.\r\n     */\r\n\r\n    /**\r\n     * Triggered when the router does not find a matching route.\r\n     * @event router:route:not-found\r\n     * @param {string} fragment The url fragment.\r\n     * @param {Router} router The router.\r\n     */\r\n\r\n    var createRouter = function() {\r\n        var queue = [],\r\n            isProcessing = ko.observable(false),\r\n            currentActivation,\r\n            currentInstruction,\r\n            activeItem = activator.create();\r\n\r\n        var router = {\r\n            /**\r\n             * The route handlers that are registered. Each handler consists of a `routePattern` and a `callback`.\r\n             * @property {object[]} handlers\r\n             */\r\n            handlers: [],\r\n            /**\r\n             * The route configs that are registered.\r\n             * @property {object[]} routes\r\n             */\r\n            routes: [],\r\n            /**\r\n             * The route configurations that have been designated as displayable in a nav ui (nav:true).\r\n             * @property {KnockoutObservableArray} navigationModel\r\n             */\r\n            navigationModel: ko.observableArray([]),\r\n            /**\r\n             * The active item/screen based on the current navigation state.\r\n             * @property {Activator} activeItem\r\n             */\r\n            activeItem: activeItem,\r\n            /**\r\n             * Indicates that the router (or a child router) is currently in the process of navigating.\r\n             * @property {KnockoutComputed} isNavigating\r\n             */\r\n            isNavigating: ko.computed(function() {\r\n                var current = activeItem();\r\n                var processing = isProcessing();\r\n                var currentRouterIsProcesing = current\r\n                    && current.router\r\n                    && current.router != router\r\n                    && current.router.isNavigating() ? true : false;\r\n                return  processing || currentRouterIsProcesing;\r\n            }),\r\n            /**\r\n             * An observable surfacing the active routing instruction that is currently being processed or has recently finished processing.\r\n             * The instruction object has `config`, `fragment`, `queryString`, `params` and `queryParams` properties.\r\n             * @property {KnockoutObservable} activeInstruction\r\n             */\r\n            activeInstruction:ko.observable(null),\r\n            __router__:true\r\n        };\r\n\r\n        events.includeIn(router);\r\n\r\n        activeItem.settings.areSameItem = function (currentItem, newItem, currentActivationData, newActivationData) {\r\n            if (currentItem == newItem) {\r\n                return compareArrays(currentActivationData, newActivationData);\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        activeItem.settings.findChildActivator = function(item) {\r\n            if (item && item.router && item.router.parent == router) {\r\n                return item.router.activeItem;\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        function hasChildRouter(instance, parentRouter) {\r\n            return instance.router && instance.router.parent == parentRouter;\r\n        }\r\n\r\n        function setCurrentInstructionRouteIsActive(flag) {\r\n            if (currentInstruction && currentInstruction.config.isActive) {\r\n                currentInstruction.config.isActive(flag);\r\n            }\r\n        }\r\n\r\n        function completeNavigation(instance, instruction, mode) {\r\n            system.log('Navigation Complete', instance, instruction);\r\n\r\n            var fromModuleId = system.getModuleId(currentActivation);\r\n            if (fromModuleId) {\r\n                router.trigger('router:navigation:from:' + fromModuleId);\r\n            }\r\n\r\n            currentActivation = instance;\r\n\r\n            setCurrentInstructionRouteIsActive(false);\r\n            currentInstruction = instruction;\r\n            setCurrentInstructionRouteIsActive(true);\r\n\r\n            var toModuleId = system.getModuleId(currentActivation);\r\n            if (toModuleId) {\r\n                router.trigger('router:navigation:to:' + toModuleId);\r\n            }\r\n\r\n            if (!hasChildRouter(instance, router)) {\r\n                router.updateDocumentTitle(instance, instruction);\r\n            }\r\n\r\n            switch (mode) {\r\n                case 'rootRouter':\r\n                    lastUrl = reconstructUrl(currentInstruction);\r\n                    break;\r\n                case 'rootRouterWithChild':\r\n                    lastTryUrl = reconstructUrl(currentInstruction);\r\n                    break;\r\n                case 'lastChildRouter':\r\n                    lastUrl = lastTryUrl;\r\n                    break;\r\n            }\r\n\r\n            rootRouter.explicitNavigation = false;\r\n            rootRouter.navigatingBack = false;\r\n\r\n            router.trigger('router:navigation:complete', instance, instruction, router);\r\n        }\r\n\r\n        function cancelNavigation(instance, instruction) {\r\n            system.log('Navigation Cancelled');\r\n\r\n            router.activeInstruction(currentInstruction);\r\n\r\n            router.navigate(lastUrl, false);\r\n\r\n            isProcessing(false);\r\n            rootRouter.explicitNavigation = false;\r\n            rootRouter.navigatingBack = false;\r\n            router.trigger('router:navigation:cancelled', instance, instruction, router);\r\n        }\r\n\r\n        function redirect(url) {\r\n            system.log('Navigation Redirecting');\r\n\r\n            isProcessing(false);\r\n            rootRouter.explicitNavigation = false;\r\n            rootRouter.navigatingBack = false;\r\n            router.navigate(url, { trigger: true, replace: true });\r\n        }\r\n\r\n        function activateRoute(activator, instance, instruction) {\r\n            rootRouter.navigatingBack = !rootRouter.explicitNavigation && currentActivation != instruction.fragment;\r\n            router.trigger('router:route:activating', instance, instruction, router);\r\n\r\n            var options = {\r\n                canDeactivate: !router.parent\r\n            };\r\n\r\n            activator.activateItem(instance, instruction.params, options).then(function(succeeded) {\r\n                if (succeeded) {\r\n                    var previousActivation = currentActivation;\r\n                    var withChild = hasChildRouter(instance, router);\r\n                    var mode = '';\r\n\r\n                    if (router.parent) {\r\n                        if(!withChild) {\r\n                            mode = 'lastChildRouter';\r\n                        }\r\n                    } else {\r\n                        if (withChild) {\r\n                            mode = 'rootRouterWithChild';\r\n                        } else {\r\n                            mode = 'rootRouter';\r\n                        }\r\n                    }\r\n\r\n                    completeNavigation(instance, instruction, mode);\r\n\r\n                    if (withChild) {\r\n                        instance.router.trigger('router:route:before-child-routes', instance, instruction, router);\r\n\r\n                        var fullFragment = instruction.fragment;\r\n                        if (instruction.queryString) {\r\n                            fullFragment += \"?\" + instruction.queryString;\r\n                        }\r\n\r\n                        instance.router.loadUrl(fullFragment);\r\n                    }\r\n\r\n                    if (previousActivation == instance) {\r\n                        router.attached();\r\n                        router.compositionComplete();\r\n                    }\r\n                } else if(activator.settings.lifecycleData && activator.settings.lifecycleData.redirect){\r\n                    redirect(activator.settings.lifecycleData.redirect);\r\n                }else{\r\n                    cancelNavigation(instance, instruction);\r\n                }\r\n\r\n                if (startDeferred) {\r\n                    startDeferred.resolve();\r\n                    startDeferred = null;\r\n                }\r\n            }).fail(function(err){\r\n                system.error(err);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Inspects routes and modules before activation. Can be used to protect access by cancelling navigation or redirecting.\r\n         * @method guardRoute\r\n         * @param {object} instance The module instance that is about to be activated by the router.\r\n         * @param {object} instruction The route instruction. The instruction object has config, fragment, queryString, params and queryParams properties.\r\n         * @return {Promise|Boolean|String} If a boolean, determines whether or not the route should activate or be cancelled. If a string, causes a redirect to the specified route. Can also be a promise for either of these value types.\r\n         */\r\n        function handleGuardedRoute(activator, instance, instruction) {\r\n            var resultOrPromise = router.guardRoute(instance, instruction);\r\n            if (resultOrPromise || resultOrPromise === '') {\r\n                if (resultOrPromise.then) {\r\n                    resultOrPromise.then(function(result) {\r\n                        if (result) {\r\n                            if (system.isString(result)) {\r\n                                redirect(result);\r\n                            } else {\r\n                                activateRoute(activator, instance, instruction);\r\n                            }\r\n                        } else {\r\n                            cancelNavigation(instance, instruction);\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (system.isString(resultOrPromise)) {\r\n                        redirect(resultOrPromise);\r\n                    } else {\r\n                        activateRoute(activator, instance, instruction);\r\n                    }\r\n                }\r\n            } else {\r\n                cancelNavigation(instance, instruction);\r\n            }\r\n        }\r\n\r\n        function ensureActivation(activator, instance, instruction) {\r\n            if (router.guardRoute) {\r\n                handleGuardedRoute(activator, instance, instruction);\r\n            } else {\r\n                activateRoute(activator, instance, instruction);\r\n            }\r\n        }\r\n\r\n        function canReuseCurrentActivation(instruction) {\r\n            return currentInstruction\r\n                && currentInstruction.config.moduleId == instruction.config.moduleId\r\n                && currentActivation\r\n                && ((currentActivation.canReuseForRoute && currentActivation.canReuseForRoute.apply(currentActivation, instruction.params))\r\n                || (!currentActivation.canReuseForRoute && currentActivation.router && currentActivation.router.loadUrl));\r\n        }\r\n\r\n        function dequeueInstruction() {\r\n            if (isProcessing()) {\r\n                return;\r\n            }\r\n\r\n            var instruction = queue.shift();\r\n            queue = [];\r\n\r\n            if (!instruction) {\r\n                return;\r\n            }\r\n\r\n            isProcessing(true);\r\n            router.activeInstruction(instruction);\r\n            router.trigger('router:navigation:processing', instruction, router);\r\n\r\n            if (canReuseCurrentActivation(instruction)) {\r\n                var tempActivator = activator.create();\r\n                tempActivator.forceActiveItem(currentActivation); //enforce lifecycle without re-compose\r\n                tempActivator.settings.areSameItem = activeItem.settings.areSameItem;\r\n                tempActivator.settings.findChildActivator = activeItem.settings.findChildActivator;\r\n                ensureActivation(tempActivator, currentActivation, instruction);\r\n            } else if(!instruction.config.moduleId) {\r\n                ensureActivation(activeItem, {\r\n                    viewUrl:instruction.config.viewUrl,\r\n                    canReuseForRoute:function() {\r\n                        return true;\r\n                    }\r\n                }, instruction);\r\n            } else {\r\n                system.acquire(instruction.config.moduleId).then(function(m) {\r\n                    var instance = system.resolveObject(m);\r\n\r\n                    if(instruction.config.viewUrl) {\r\n                        instance.viewUrl = instruction.config.viewUrl;\r\n                    }\r\n\r\n                    ensureActivation(activeItem, instance, instruction);\r\n                }).fail(function(err) {\r\n                    cancelNavigation(null, instruction);\r\n                    system.error('Failed to load routed module (' + instruction.config.moduleId + '). Details: ' + err.message, err);\r\n                });\r\n            }\r\n        }\r\n\r\n        function queueInstruction(instruction) {\r\n            queue.unshift(instruction);\r\n            dequeueInstruction();\r\n        }\r\n\r\n        // Given a route, and a URL fragment that it matches, return the array of\r\n        // extracted decoded parameters. Empty or unmatched parameters will be\r\n        // treated as `null` to normalize cross-browser behavior.\r\n        function createParams(routePattern, fragment, queryString) {\r\n            var params = routePattern.exec(fragment).slice(1);\r\n\r\n            for (var i = 0; i < params.length; i++) {\r\n                var current = params[i];\r\n                params[i] = current ? decodeURIComponent(current) : null;\r\n            }\r\n\r\n            var queryParams = router.parseQueryString(queryString);\r\n            if (queryParams) {\r\n                params.push(queryParams);\r\n            }\r\n\r\n            return {\r\n                params:params,\r\n                queryParams:queryParams\r\n            };\r\n        }\r\n\r\n        function configureRoute(config){\r\n            router.trigger('router:route:before-config', config, router);\r\n\r\n            if (!system.isRegExp(config.route)) {\r\n                config.title = config.title || router.convertRouteToTitle(config.route);\r\n\r\n                if (!config.viewUrl) {\r\n                    config.moduleId = config.moduleId || router.convertRouteToModuleId(config.route);\r\n                }\r\n\r\n                config.hash = config.hash || router.convertRouteToHash(config.route);\r\n\r\n                if (config.hasChildRoutes) {\r\n                    config.route = config.route + '*childRoutes';\r\n                }\r\n\r\n                config.routePattern = routeStringToRegExp(config.route);\r\n            }else{\r\n                config.routePattern = config.route;\r\n            }\r\n\r\n            config.isActive = config.isActive || ko.observable(false);\r\n            router.trigger('router:route:after-config', config, router);\r\n            router.routes.push(config);\r\n\r\n            router.route(config.routePattern, function(fragment, queryString) {\r\n                var paramInfo = createParams(config.routePattern, fragment, queryString);\r\n                queueInstruction({\r\n                    fragment: fragment,\r\n                    queryString:queryString,\r\n                    config: config,\r\n                    params: paramInfo.params,\r\n                    queryParams:paramInfo.queryParams\r\n                });\r\n            });\r\n        };\r\n\r\n        function mapRoute(config) {\r\n            if(system.isArray(config.route)){\r\n                var isActive = config.isActive || ko.observable(false);\r\n\r\n                for(var i = 0, length = config.route.length; i < length; i++){\r\n                    var current = system.extend({}, config);\r\n\r\n                    current.route = config.route[i];\r\n                    current.isActive = isActive;\r\n\r\n                    if(i > 0){\r\n                        delete current.nav;\r\n                    }\r\n\r\n                    configureRoute(current);\r\n                }\r\n            }else{\r\n                configureRoute(config);\r\n            }\r\n\r\n            return router;\r\n        }\r\n\r\n        /**\r\n         * Parses a query string into an object.\r\n         * @method parseQueryString\r\n         * @param {string} queryString The query string to parse.\r\n         * @return {object} An object keyed according to the query string parameters.\r\n         */\r\n        router.parseQueryString = function (queryString) {\r\n            var queryObject, pairs;\r\n\r\n            if (!queryString) {\r\n                return null;\r\n            }\r\n\r\n            pairs = queryString.split('&');\r\n\r\n            if (pairs.length == 0) {\r\n                return null;\r\n            }\r\n\r\n            queryObject = {};\r\n\r\n            for (var i = 0; i < pairs.length; i++) {\r\n                var pair = pairs[i];\r\n                if (pair === '') {\r\n                    continue;\r\n                }\r\n\r\n                var sp = pair.indexOf(\"=\"),\r\n                    key = sp === -1 ? pair : pair.substr(0, sp),\r\n                    value = sp === -1 ? null : decodeURIComponent(pair.substr(sp + 1).replace(/\\+/g, ' '));\r\n\r\n                var existing = queryObject[key];\r\n\r\n                if (existing) {\r\n                    if (system.isArray(existing)) {\r\n                        existing.push(value);\r\n                    } else {\r\n                        queryObject[key] = [existing, value];\r\n                    }\r\n                }\r\n                else {\r\n                    queryObject[key] = value;\r\n                }\r\n            }\r\n\r\n            return queryObject;\r\n        };\r\n\r\n        /**\r\n         * Add a route to be tested when the url fragment changes.\r\n         * @method route\r\n         * @param {RegEx} routePattern The route pattern to test against.\r\n         * @param {function} callback The callback to execute when the route pattern is matched.\r\n         */\r\n        router.route = function(routePattern, callback) {\r\n            router.handlers.push({ routePattern: routePattern, callback: callback });\r\n        };\r\n\r\n        /**\r\n         * Attempt to load the specified URL fragment. If a route succeeds with a match, returns `true`. If no defined routes matches the fragment, returns `false`.\r\n         * @method loadUrl\r\n         * @param {string} fragment The URL fragment to find a match for.\r\n         * @return {boolean} True if a match was found, false otherwise.\r\n         */\r\n        router.loadUrl = function(fragment) {\r\n            var handlers = router.handlers,\r\n                queryString = null,\r\n                coreFragment = fragment,\r\n                queryIndex = fragment.indexOf('?');\r\n\r\n            if (queryIndex != -1) {\r\n                coreFragment = fragment.substring(0, queryIndex);\r\n                queryString = fragment.substr(queryIndex + 1);\r\n            }\r\n\r\n            if(router.relativeToParentRouter){\r\n                var instruction = this.parent.activeInstruction();\r\n\t\t\t\tcoreFragment = queryIndex == -1 ? instruction.params.join('/') : instruction.params.slice(0, -1).join('/');\r\n\r\n                if(coreFragment && coreFragment.charAt(0) == '/'){\r\n                    coreFragment = coreFragment.substr(1);\r\n                }\r\n\r\n                if(!coreFragment){\r\n                    coreFragment = '';\r\n                }\r\n\r\n                coreFragment = coreFragment.replace('//', '/').replace('//', '/');\r\n            }\r\n\r\n            coreFragment = coreFragment.replace(trailingSlash, '');\r\n\r\n            for (var i = 0; i < handlers.length; i++) {\r\n                var current = handlers[i];\r\n                if (current.routePattern.test(coreFragment)) {\r\n                    current.callback(coreFragment, queryString);\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            system.log('Route Not Found', fragment, currentInstruction);\r\n            router.trigger('router:route:not-found', fragment, router);\r\n\r\n            if (router.parent) {\r\n                lastUrl = lastTryUrl;\r\n            }\r\n\r\n            history.navigate(lastUrl, { trigger:false, replace:true });\r\n\r\n            rootRouter.explicitNavigation = false;\r\n            rootRouter.navigatingBack = false;\r\n\r\n            return false;\r\n        };\r\n\r\n        var titleSubscription;\r\n        function setTitle(value) {\r\n            var appTitle = ko.unwrap(app.title);\r\n\r\n            if (appTitle) {\r\n                document.title = value + \" | \" + appTitle;\r\n            } else {\r\n                document.title = value;\r\n            }\r\n        }\r\n\r\n        // Allow observable to be used for app.title\r\n        if(ko.isObservable(app.title)) {\r\n            app.title.subscribe(function () {\r\n                var instruction = router.activeInstruction();\r\n                var title = instruction != null ? ko.unwrap(instruction.config.title) : '';\r\n                setTitle(title);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Updates the document title based on the activated module instance, the routing instruction and the app.title.\r\n         * @method updateDocumentTitle\r\n         * @param {object} instance The activated module.\r\n         * @param {object} instruction The routing instruction associated with the action. It has a `config` property that references the original route mapping config.\r\n         */\r\n        router.updateDocumentTitle = function (instance, instruction) {\r\n            var appTitle = ko.unwrap(app.title),\r\n                title = instruction.config.title;\r\n\r\n            if (titleSubscription) {\r\n                titleSubscription.dispose();\r\n            }\r\n\r\n            if (title) {\r\n                if (ko.isObservable(title)) {\r\n                    titleSubscription = title.subscribe(setTitle);\r\n                    setTitle(title());\r\n                } else {\r\n                    setTitle(title);\r\n                }\r\n            } else if (appTitle) {\r\n                document.title = appTitle;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Save a fragment into the hash history, or replace the URL state if the\r\n         * 'replace' option is passed. You are responsible for properly URL-encoding\r\n         * the fragment in advance.\r\n         * The options object can contain `trigger: false` if you wish to not have the\r\n         * route callback be fired, or `replace: true`, if\r\n         * you wish to modify the current URL without adding an entry to the history.\r\n         * @method navigate\r\n         * @param {string} fragment The url fragment to navigate to.\r\n         * @param {object|boolean} options An options object with optional trigger and replace flags. You can also pass a boolean directly to set the trigger option. Trigger is `true` by default.\r\n         * @return {boolean} Returns true/false from loading the url.\r\n         */\r\n        router.navigate = function(fragment, options) {\r\n            if(fragment && fragment.indexOf('://') != -1) {\r\n                window.location.href = fragment;\r\n                return true;\r\n            }\r\n\r\n            if(options === undefined || (system.isBoolean(options) && options) || (system.isObject(options) && options.trigger)) {\r\n                rootRouter.explicitNavigation = true;\r\n            }\r\n\r\n            if ((system.isBoolean(options) && !options) || (options && options.trigger != undefined && !options.trigger)) {\r\n                lastUrl = fragment;\r\n            }\r\n\r\n            return history.navigate(fragment, options);\r\n        };\r\n\r\n        /**\r\n         * Navigates back in the browser history.\r\n         * @method navigateBack\r\n         */\r\n        router.navigateBack = function() {\r\n            history.navigateBack();\r\n        };\r\n\r\n        router.attached = function() {\r\n            router.trigger('router:navigation:attached', currentActivation, currentInstruction, router);\r\n        };\r\n\r\n        router.compositionComplete = function(){\r\n            isProcessing(false);\r\n            router.trigger('router:navigation:composition-complete', currentActivation, currentInstruction, router);\r\n            dequeueInstruction();\r\n        };\r\n\r\n        /**\r\n         * Converts a route to a hash suitable for binding to a link's href.\r\n         * @method convertRouteToHash\r\n         * @param {string} route\r\n         * @return {string} The hash.\r\n         */\r\n        router.convertRouteToHash = function(route) {\r\n            route = route.replace(/\\*.*$/, '');\r\n\r\n            if(router.relativeToParentRouter){\r\n                var instruction = router.parent.activeInstruction(),\r\n                    hash = route ? instruction.config.hash + '/' + route : instruction.config.hash;\r\n\r\n                if(history._hasPushState){\r\n                    hash = '/' + hash;\r\n                }\r\n\r\n                hash = hash.replace('//', '/').replace('//', '/');\r\n                return hash;\r\n            }\r\n\r\n            if(history._hasPushState){\r\n                return route;\r\n            }\r\n\r\n            return \"#\" + route;\r\n        };\r\n\r\n        /**\r\n         * Converts a route to a module id. This is only called if no module id is supplied as part of the route mapping.\r\n         * @method convertRouteToModuleId\r\n         * @param {string} route\r\n         * @return {string} The module id.\r\n         */\r\n        router.convertRouteToModuleId = function(route) {\r\n            return stripParametersFromRoute(route);\r\n        };\r\n\r\n        /**\r\n         * Converts a route to a displayable title. This is only called if no title is specified as part of the route mapping.\r\n         * @method convertRouteToTitle\r\n         * @param {string} route\r\n         * @return {string} The title.\r\n         */\r\n        router.convertRouteToTitle = function(route) {\r\n            var value = stripParametersFromRoute(route);\r\n            return value.substring(0, 1).toUpperCase() + value.substring(1);\r\n        };\r\n\r\n        /**\r\n         * Maps route patterns to modules.\r\n         * @method map\r\n         * @param {string|object|object[]} route A route, config or array of configs.\r\n         * @param {object} [config] The config for the specified route.\r\n         * @chainable\r\n         * @example\r\n         router.map([\r\n         { route: '', title:'Home', moduleId: 'homeScreen', nav: true },\r\n         { route: 'customer/:id', moduleId: 'customerDetails'}\r\n         ]);\r\n         */\r\n        router.map = function(route, config) {\r\n            if (system.isArray(route)) {\r\n                for (var i = 0; i < route.length; i++) {\r\n                    router.map(route[i]);\r\n                }\r\n\r\n                return router;\r\n            }\r\n\r\n            if (system.isString(route) || system.isRegExp(route)) {\r\n                if (!config) {\r\n                    config = {};\r\n                } else if (system.isString(config)) {\r\n                    config = { moduleId: config };\r\n                }\r\n\r\n                config.route = route;\r\n            } else {\r\n                config = route;\r\n            }\r\n\r\n            return mapRoute(config);\r\n        };\r\n\r\n        /**\r\n         * Builds an observable array designed to bind a navigation UI to. The model will exist in the `navigationModel` property.\r\n         * @method buildNavigationModel\r\n         * @param {number} defaultOrder The default order to use for navigation visible routes that don't specify an order. The default is 100 and each successive route will be one more than that.\r\n         * @chainable\r\n         */\r\n        router.buildNavigationModel = function(defaultOrder) {\r\n            var nav = [], routes = router.routes;\r\n            var fallbackOrder = defaultOrder || 100;\r\n\r\n            for (var i = 0; i < routes.length; i++) {\r\n                var current = routes[i];\r\n\r\n                if (current.nav) {\r\n                    if (!system.isNumber(current.nav)) {\r\n                        current.nav = ++fallbackOrder;\r\n                    }\r\n\r\n                    nav.push(current);\r\n                }\r\n            }\r\n\r\n            nav.sort(function(a, b) { return a.nav - b.nav; });\r\n            router.navigationModel(nav);\r\n\r\n            return router;\r\n        };\r\n\r\n        /**\r\n         * Configures how the router will handle unknown routes.\r\n         * @method mapUnknownRoutes\r\n         * @param {string|function} [config] If not supplied, then the router will map routes to modules with the same name.\r\n         * If a string is supplied, it represents the module id to route all unknown routes to.\r\n         * Finally, if config is a function, it will be called back with the route instruction containing the route info. The function can then modify the instruction by adding a moduleId and the router will take over from there.\r\n         * @param {string} [replaceRoute] If config is a module id, then you can optionally provide a route to replace the url with.\r\n         * @chainable\r\n         */\r\n        router.mapUnknownRoutes = function(config, replaceRoute) {\r\n            var catchAllRoute = \"*catchall\";\r\n            var catchAllPattern = routeStringToRegExp(catchAllRoute);\r\n\r\n            router.route(catchAllPattern, function (fragment, queryString) {\r\n                var paramInfo = createParams(catchAllPattern, fragment, queryString);\r\n                var instruction = {\r\n                    fragment: fragment,\r\n                    queryString: queryString,\r\n                    config: {\r\n                        route: catchAllRoute,\r\n                        routePattern: catchAllPattern\r\n                    },\r\n                    params: paramInfo.params,\r\n                    queryParams: paramInfo.queryParams\r\n                };\r\n\r\n                if (!config) {\r\n                    instruction.config.moduleId = fragment;\r\n                } else if (system.isString(config)) {\r\n                    instruction.config.moduleId = config;\r\n                    if(replaceRoute){\r\n                        history.navigate(replaceRoute, { trigger:false, replace:true });\r\n                    }\r\n                } else if (system.isFunction(config)) {\r\n                    var result = config(instruction);\r\n                    if (result && result.then) {\r\n                        result.then(function() {\r\n                            router.trigger('router:route:before-config', instruction.config, router);\r\n                            router.trigger('router:route:after-config', instruction.config, router);\r\n                            queueInstruction(instruction);\r\n                        });\r\n                        return;\r\n                    }\r\n                } else {\r\n                    instruction.config = config;\r\n                    instruction.config.route = catchAllRoute;\r\n                    instruction.config.routePattern = catchAllPattern;\r\n                }\r\n\r\n                router.trigger('router:route:before-config', instruction.config, router);\r\n                router.trigger('router:route:after-config', instruction.config, router);\r\n                queueInstruction(instruction);\r\n            });\r\n\r\n            return router;\r\n        };\r\n\r\n        /**\r\n         * Resets the router by removing handlers, routes, event handlers and previously configured options.\r\n         * @method reset\r\n         * @chainable\r\n         */\r\n        router.reset = function() {\r\n            currentInstruction = currentActivation = undefined;\r\n            router.handlers = [];\r\n            router.routes = [];\r\n            router.off();\r\n            delete router.options;\r\n            return router;\r\n        };\r\n\r\n        /**\r\n         * Makes all configured routes and/or module ids relative to a certain base url.\r\n         * @method makeRelative\r\n         * @param {string|object} settings If string, the value is used as the base for routes and module ids. If an object, you can specify `route` and `moduleId` separately. In place of specifying route, you can set `fromParent:true` to make routes automatically relative to the parent router's active route.\r\n         * @chainable\r\n         */\r\n        router.makeRelative = function(settings){\r\n            if(system.isString(settings)){\r\n                settings = {\r\n                    moduleId:settings,\r\n                    route:settings\r\n                };\r\n            }\r\n\r\n            if(settings.moduleId && !endsWith(settings.moduleId, '/')){\r\n                settings.moduleId += '/';\r\n            }\r\n\r\n            if(settings.route && !endsWith(settings.route, '/')){\r\n                settings.route += '/';\r\n            }\r\n\r\n            if(settings.fromParent){\r\n                router.relativeToParentRouter = true;\r\n            }\r\n\r\n            router.on('router:route:before-config').then(function(config){\r\n                if(settings.moduleId){\r\n                    config.moduleId = settings.moduleId + config.moduleId;\r\n                }\r\n\r\n                if(settings.route){\r\n                    if(config.route === ''){\r\n                        config.route = settings.route.substring(0, settings.route.length - 1);\r\n                    }else{\r\n                        config.route = settings.route + config.route;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (settings.dynamicHash) {\r\n                router.on('router:route:after-config').then(function (config) {\r\n                    config.routePattern = routeStringToRegExp(config.route ? settings.dynamicHash + '/' + config.route : settings.dynamicHash);\r\n                    config.dynamicHash = config.dynamicHash || ko.observable(config.hash);\r\n                });\r\n\r\n                router.on('router:route:before-child-routes').then(function(instance, instruction, parentRouter) {\r\n                    var childRouter = instance.router;\r\n\r\n                    for(var i = 0; i < childRouter.routes.length; i++) {\r\n                        var route = childRouter.routes[i];\r\n                        var params = instruction.params.slice(0);\r\n\r\n                        route.hash = childRouter.convertRouteToHash(route.route)\r\n                            .replace(namedParam, function(match) {\r\n                                return params.length > 0 ? params.shift() : match;\r\n                            });\r\n\r\n                        route.dynamicHash(route.hash);\r\n                    }\r\n                });\r\n            }\r\n\r\n            return router;\r\n        };\r\n\r\n        /**\r\n         * Creates a child router.\r\n         * @method createChildRouter\r\n         * @return {Router} The child router.\r\n         */\r\n        router.createChildRouter = function() {\r\n            var childRouter = createRouter();\r\n            childRouter.parent = router;\r\n            return childRouter;\r\n        };\r\n\r\n        return router;\r\n    };\r\n\r\n    /**\r\n     * @class RouterModule\r\n     * @extends Router\r\n     * @static\r\n     */\r\n    rootRouter = createRouter();\r\n    rootRouter.explicitNavigation = false;\r\n    rootRouter.navigatingBack = false;\r\n\r\n    /**\r\n     * Makes the RegExp generated for routes case sensitive, rather than the default of case insensitive.\r\n     * @method makeRoutesCaseSensitive\r\n     */\r\n    rootRouter.makeRoutesCaseSensitive = function(){\r\n        routesAreCaseSensitive = true;\r\n    };\r\n\r\n    /**\r\n     * Verify that the target is the current window\r\n     * @method targetIsThisWindow\r\n     * @return {boolean} True if the event's target is the current window, false otherwise.\r\n     */\r\n    rootRouter.targetIsThisWindow = function(event) {\r\n        var targetWindow = $(event.target).attr('target');\r\n\r\n        if (!targetWindow ||\r\n            targetWindow === window.name ||\r\n            targetWindow === '_self' ||\r\n            (targetWindow === 'top' && window === window.top)) { return true; }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Activates the router and the underlying history tracking mechanism.\r\n     * @method activate\r\n     * @return {Promise} A promise that resolves when the router is ready.\r\n     */\r\n    rootRouter.activate = function(options) {\r\n        return system.defer(function(dfd) {\r\n            startDeferred = dfd;\r\n            rootRouter.options = system.extend({ routeHandler: rootRouter.loadUrl }, rootRouter.options, options);\r\n\r\n            history.activate(rootRouter.options);\r\n\r\n            if(history._hasPushState){\r\n                var routes = rootRouter.routes,\r\n                    i = routes.length;\r\n\r\n                while(i--){\r\n                    var current = routes[i];\r\n                    current.hash = current.hash.replace('#', '/');\r\n                }\r\n            }\r\n\r\n            var rootStripper = rootRouter.options.root && new RegExp(\"^\" + rootRouter.options.root + \"/\");\r\n\r\n            $(document).delegate(\"a\", 'click', function(evt){\r\n                \r\n                // ignore default prevented since these are not supposed to behave like links anyway\r\n                if(evt.isDefaultPrevented()){\r\n                    return;\r\n                }\r\n\r\n                if(history._hasPushState){\r\n                    if(!evt.altKey && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && rootRouter.targetIsThisWindow(evt)){\r\n                        var href = $(this).attr(\"href\");\r\n\r\n                        // Ensure the protocol is not part of URL, meaning its relative.\r\n                        // Stop the event bubbling to ensure the link will not cause a page refresh.\r\n                        if (href != null && !(href.charAt(0) === \"#\" || /^[a-z]+:/i.test(href))) {\r\n                            rootRouter.explicitNavigation = true;\r\n                            evt.preventDefault();\r\n\r\n                            if (rootStripper) {\r\n                                href = href.replace(rootStripper, \"\");\r\n                            }\r\n\r\n                            history.navigate(href);\r\n                        }\r\n                    }\r\n                }else{\r\n                    rootRouter.explicitNavigation = true;\r\n                }\r\n            });\r\n\r\n            if(history.options.silent && startDeferred){\r\n                startDeferred.resolve();\r\n                startDeferred = null;\r\n            }\r\n        }).promise();\r\n    };\r\n\r\n    /**\r\n     * Deactivate current items and turn history listening off.\r\n     * @method deactivate\r\n     */\r\n    rootRouter.deactivate = function() {\r\n        rootRouter.activeItem(null);\r\n        history.deactivate();\r\n    };\r\n\r\n    /**\r\n     * Installs the router's custom ko binding handler.\r\n     * @method install\r\n     */\r\n    rootRouter.install = function(){\r\n        ko.bindingHandlers.router = {\r\n            init: function() {\r\n                return { controlsDescendantBindings: true };\r\n            },\r\n            update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                var settings = ko.utils.unwrapObservable(valueAccessor()) || {};\r\n\r\n                if (settings.__router__) {\r\n                    settings = {\r\n                        model:settings.activeItem(),\r\n                        attached:settings.attached,\r\n                        compositionComplete:settings.compositionComplete,\r\n                        activate: false\r\n                    };\r\n                } else {\r\n                    var theRouter = ko.utils.unwrapObservable(settings.router || viewModel.router) || rootRouter;\r\n                    settings.model = theRouter.activeItem();\r\n                    settings.attached = theRouter.attached;\r\n                    settings.compositionComplete = theRouter.compositionComplete;\r\n                    settings.activate = false;\r\n                }\r\n\r\n                composition.compose(element, settings, bindingContext);\r\n            }\r\n        };\r\n\r\n        ko.virtualElements.allowedBindings.router = true;\r\n    };\r\n\r\n    return rootRouter;\r\n});\r\n"]}