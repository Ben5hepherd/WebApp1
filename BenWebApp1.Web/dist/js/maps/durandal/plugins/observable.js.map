{"version":3,"sources":["durandal/plugins/observable.js"],"names":["define","system","binder","ko","defaultShouldIgnorePropertyName","propertyName","first","changeDetectionMethod","isNode","obj","undefined","nodeType","isNumber","canConvertType","value","jquery","type","toString","call","nonObservableTypes","indexOf","createLookup","Object","defineProperty","enumerable","configurable","writable","makeObservableArray","original","observable","hasChanged","lookup","__observable__","notify","__full__","es5Functions","forEach","methodName","arrayProto","apply","arguments","observableArrayMethods","methodCallResult","observableArrayFunctions","arrayMethods","valueWillMutate","valueHasMutated","additiveArrayFunctions","i","len","length","convertObject","slice","push","isArray","observableArray","shouldIgnorePropertyName","descriptor","getPropertyDescriptor","get","set","isFunction","convertProperty","logConversion","log","innerSetter","newValue","destroyAll","isObservable","skipPromises","isPromise","then","result","oa","func","subscribe","arrayChanges","isWriteableObservable","evaluatorOrOptions","computed","computedOptions","owner","deferEvaluation","read","error","write","observableModule","prototype","Array","fn","getOwnPropertyDescriptor","getPrototypeOf","o","name","proto","install","options","binding","view","instruction","applyBindings","skipConversion","changeDetection"],"mappings":"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","file":"../../../durandal/plugins/observable.js","sourcesContent":["/**\r\n * Durandal 2.2.0 Copyright (c) 2010-2016 Blue Spire Consulting, Inc. All Rights Reserved.\r\n * Available via the MIT license.\r\n * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.\r\n */\r\n/**\r\n * Enables automatic observability of plain javascript object for ES5 compatible browsers. Also, converts promise properties into observables that are updated when the promise resolves.\r\n * @module observable\r\n * @requires system\r\n * @requires binder\r\n * @requires knockout\r\n */\r\ndefine(['durandal/system', 'durandal/binder', 'knockout'], function(system, binder, ko) {\r\n    var observableModule,\r\n        toString = Object.prototype.toString,\r\n        nonObservableTypes = ['[object Function]', '[object String]', '[object Boolean]', '[object Number]', '[object Date]', '[object RegExp]'],\r\n        observableArrayMethods = ['remove', 'removeAll', 'destroy', 'destroyAll', 'replace'],\r\n        arrayMethods = ['pop', 'reverse', 'sort', 'shift', 'slice'],\r\n        additiveArrayFunctions = ['push', 'unshift'],\r\n        es5Functions = ['filter', 'map', 'reduce', 'reduceRight', 'forEach', 'every', 'some'],\r\n        arrayProto = Array.prototype,\r\n        observableArrayFunctions = ko.observableArray.fn,\r\n        logConversion = false,\r\n        changeDetectionMethod = undefined,\r\n        skipPromises = false,\r\n        shouldIgnorePropertyName;\r\n\r\n    /**\r\n     * You can call observable(obj, propertyName) to get the observable function for the specified property on the object.\r\n     * @class ObservableModule\r\n     */\r\n\r\n    if (!('getPropertyDescriptor' in Object)) {\r\n        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\r\n        var getPrototypeOf = Object.getPrototypeOf;\r\n\r\n        Object['getPropertyDescriptor'] = function(o, name) {\r\n            var proto = o, descriptor;\r\n\r\n            while(proto && !(descriptor = getOwnPropertyDescriptor(proto, name))) {\r\n                proto = getPrototypeOf(proto);\r\n            }\r\n\r\n            return descriptor;\r\n        };\r\n    }\r\n\r\n    function defaultShouldIgnorePropertyName(propertyName){\r\n        var first = propertyName[0];\r\n        return first === '_' || first === '$' || (changeDetectionMethod && propertyName === changeDetectionMethod);\r\n    }\r\n\r\n    function isNode(obj) {\r\n        return !!(obj && obj.nodeType !== undefined && system.isNumber(obj.nodeType));\r\n    }\r\n\r\n    function canConvertType(value) {\r\n        if (!value || isNode(value) || value.ko === ko || value.jquery) {\r\n            return false;\r\n        }\r\n\r\n        var type = toString.call(value);\r\n\r\n        return nonObservableTypes.indexOf(type) == -1 && !(value === true || value === false);\r\n    }\r\n\r\n    function createLookup(obj) {\r\n        var value = {};\r\n\r\n        Object.defineProperty(obj, \"__observable__\", {\r\n            enumerable: false,\r\n            configurable: false,\r\n            writable: false,\r\n            value: value\r\n        });\r\n\r\n        return value;\r\n    }\r\n\r\n    function makeObservableArray(original, observable, hasChanged) {\r\n        var lookup = original.__observable__, notify = true;\r\n\r\n        if(lookup && lookup.__full__){\r\n            return;\r\n        }\r\n\r\n        lookup = lookup || createLookup(original);\r\n        lookup.__full__ = true;\r\n\r\n        es5Functions.forEach(function (methodName) {\r\n            observable[methodName] = function () {\r\n                return arrayProto[methodName].apply(original, arguments);\r\n            };\r\n        });\r\n\r\n        observableArrayMethods.forEach(function(methodName) {\r\n            original[methodName] = function() {\r\n                notify = false;\r\n                var methodCallResult = observableArrayFunctions[methodName].apply(observable, arguments);\r\n                notify = true;\r\n                return methodCallResult;\r\n            };\r\n        });\r\n\r\n        arrayMethods.forEach(function(methodName) {\r\n            original[methodName] = function() {\r\n                if(notify){\r\n                    observable.valueWillMutate();\r\n                }\r\n\r\n                var methodCallResult = arrayProto[methodName].apply(original, arguments);\r\n\r\n                if(notify){\r\n                    observable.valueHasMutated();\r\n                }\r\n\r\n                return methodCallResult;\r\n            };\r\n        });\r\n\r\n        additiveArrayFunctions.forEach(function(methodName){\r\n            original[methodName] = function() {\r\n                for (var i = 0, len = arguments.length; i < len; i++) {\r\n                    convertObject(arguments[i], hasChanged);\r\n                }\r\n\r\n                if(notify){\r\n                    observable.valueWillMutate();\r\n                }\r\n\r\n                var methodCallResult = arrayProto[methodName].apply(original, arguments);\r\n\r\n                if(notify){\r\n                    observable.valueHasMutated();\r\n                }\r\n\r\n                return methodCallResult;\r\n            };\r\n        });\r\n\r\n        original['splice'] = function() {\r\n            for (var i = 2, len = arguments.length; i < len; i++) {\r\n                convertObject(arguments[i], hasChanged);\r\n            }\r\n\r\n            if(notify){\r\n                observable.valueWillMutate();\r\n            }\r\n\r\n            var methodCallResult = arrayProto['splice'].apply(original, arguments);\r\n\r\n            if(notify){\r\n                observable.valueHasMutated();\r\n            }\r\n\r\n            return methodCallResult;\r\n        };\r\n\r\n        for (var i = 0, len = original.length; i < len; i++) {\r\n            convertObject(original[i], hasChanged);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts an entire object into an observable object by re-writing its attributes using ES5 getters and setters. Attributes beginning with '_' or '$' are ignored.\r\n     * @method convertObject\r\n     * @param {object} obj The target object to convert.\r\n     */\r\n    function convertObject(obj, hasChanged) {\r\n        var lookup, value;\r\n\r\n        if (changeDetectionMethod) {\r\n            if(obj && obj[changeDetectionMethod]) {\r\n                if (hasChanged) {\r\n                    hasChanged = hasChanged.slice(0);\r\n                } else {\r\n                    hasChanged = [];\r\n                }\r\n                hasChanged.push(obj[changeDetectionMethod]);\r\n            }\r\n        }\r\n\r\n        if(!canConvertType(obj)){\r\n            return;\r\n        }\r\n\r\n        lookup = obj.__observable__;\r\n\r\n        if(lookup && lookup.__full__){\r\n            return;\r\n        }\r\n\r\n        lookup = lookup || createLookup(obj);\r\n        lookup.__full__ = true;\r\n\r\n        if (system.isArray(obj)) {\r\n            var observable = ko.observableArray(obj);\r\n            makeObservableArray(obj, observable, hasChanged);\r\n        } else {\r\n            for (var propertyName in obj) {\r\n                if(shouldIgnorePropertyName(propertyName)){\r\n                    continue;\r\n                }\r\n\r\n                if (!lookup[propertyName]) {\r\n                    var descriptor = Object.getPropertyDescriptor(obj, propertyName);\r\n                    if (descriptor && (descriptor.get || descriptor.set)) {\r\n                        defineProperty(obj, propertyName, {\r\n                            get:descriptor.get,\r\n                            set:descriptor.set\r\n                        });\r\n                    } else {\r\n                        value = obj[propertyName];\r\n\r\n                        if(!system.isFunction(value)) {\r\n                            convertProperty(obj, propertyName, value, hasChanged);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(logConversion) {\r\n            system.log('Converted', obj);\r\n        }\r\n    }\r\n\r\n    function innerSetter(observable, newValue, isArray) {\r\n        //if this was originally an observableArray, then always check to see if we need to add/replace the array methods (if newValue was an entirely new array)\r\n        if (isArray) {\r\n            if (!newValue) {\r\n                //don't allow null, force to an empty array\r\n                newValue = [];\r\n                makeObservableArray(newValue, observable);\r\n            }\r\n            else if (!newValue.destroyAll) {\r\n                makeObservableArray(newValue, observable);\r\n            }\r\n        } else {\r\n            convertObject(newValue);\r\n        }\r\n\r\n        //call the update to the observable after the array as been updated.\r\n        observable(newValue);\r\n    }\r\n\r\n    /**\r\n     * Converts a normal property into an observable property using ES5 getters and setters.\r\n     * @method convertProperty\r\n     * @param {object} obj The target object on which the property to convert lives.\r\n     * @param {string} propertyName The name of the property to convert.\r\n     * @param {object} [original] The original value of the property. If not specified, it will be retrieved from the object.\r\n     * @return {KnockoutObservable} The underlying observable.\r\n     */\r\n    function convertProperty(obj, propertyName, original, hasChanged) {\r\n        var observable,\r\n            isArray,\r\n            lookup = obj.__observable__ || createLookup(obj);\r\n\r\n        if(original === undefined){\r\n            original = obj[propertyName];\r\n        }\r\n\r\n        if (system.isArray(original)) {\r\n            observable = ko.observableArray(original);\r\n            makeObservableArray(original, observable, hasChanged);\r\n            isArray = true;\r\n        } else if (typeof original == \"function\") {\r\n            if(ko.isObservable(original)){\r\n                observable = original;\r\n            }else{\r\n                return null;\r\n            }\r\n        } else if(!skipPromises && system.isPromise(original)) {\r\n            observable = ko.observable();\r\n\r\n            original.then(function (result) {\r\n                if(system.isArray(result)) {\r\n                    var oa = ko.observableArray(result);\r\n                    makeObservableArray(result, oa, hasChanged);\r\n                    result = oa;\r\n                }\r\n\r\n                observable(result);\r\n            });\r\n        } else {\r\n            observable = ko.observable(original);\r\n            convertObject(original, hasChanged);\r\n        }\r\n\r\n        if (hasChanged && hasChanged.length > 0) {\r\n            hasChanged.forEach(function (func) {\r\n                if (system.isArray(original)) {\r\n                    observable.subscribe(function (arrayChanges) {\r\n                        func(obj, propertyName, null, arrayChanges);\r\n                    }, null, \"arrayChange\");\r\n                } else {\r\n                    observable.subscribe(function (newValue) {\r\n                        func(obj, propertyName, newValue, null);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        Object.defineProperty(obj, propertyName, {\r\n            configurable: true,\r\n            enumerable: true,\r\n            get: observable,\r\n            set: ko.isWriteableObservable(observable) ? (function (newValue) {\r\n                if (newValue && system.isPromise(newValue) && !skipPromises) {\r\n                    newValue.then(function (result) {\r\n                        innerSetter(observable, result, system.isArray(result));\r\n                    });\r\n                } else {\r\n                    innerSetter(observable, newValue, isArray);\r\n                }\r\n            }) : undefined\r\n        });\r\n\r\n        lookup[propertyName] = observable;\r\n        return observable;\r\n    }\r\n\r\n    /**\r\n     * Defines a computed property using ES5 getters and setters.\r\n     * @method defineProperty\r\n     * @param {object} obj The target object on which to create the property.\r\n     * @param {string} propertyName The name of the property to define.\r\n     * @param {function|object} evaluatorOrOptions The Knockout computed function or computed options object.\r\n     * @return {KnockoutObservable} The underlying computed observable.\r\n     */\r\n    function defineProperty(obj, propertyName, evaluatorOrOptions) {\r\n        var computedOptions = { owner: obj, deferEvaluation: true },\r\n            computed;\r\n\r\n        if (typeof evaluatorOrOptions === 'function') {\r\n            computedOptions.read = evaluatorOrOptions;\r\n        } else {\r\n            if ('value' in evaluatorOrOptions) {\r\n                system.error('For defineProperty, you must not specify a \"value\" for the property. You must provide a \"get\" function.');\r\n            }\r\n\r\n            if (typeof evaluatorOrOptions.get !== 'function' && typeof evaluatorOrOptions.read !== 'function') {\r\n                system.error('For defineProperty, the third parameter must be either an evaluator function, or an options object containing a function called \"get\".');\r\n            }\r\n\r\n            computedOptions.read = evaluatorOrOptions.get || evaluatorOrOptions.read;\r\n            computedOptions.write = evaluatorOrOptions.set || evaluatorOrOptions.write;\r\n        }\r\n\r\n        computed = ko.computed(computedOptions);\r\n\r\n        Object.defineProperty(obj, propertyName, {\r\n            configurable: true,\r\n            enumerable: true,\r\n            value: computed\r\n        });\r\n\r\n        return convertProperty(obj, propertyName, computed);\r\n    }\r\n\r\n    observableModule = function(obj, propertyName){\r\n        var lookup, observable, value;\r\n\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n\r\n        lookup = obj.__observable__;\r\n        if(lookup){\r\n            observable = lookup[propertyName];\r\n            if(observable){\r\n                return observable;\r\n            }\r\n        }\r\n\r\n        value = obj[propertyName];\r\n\r\n        if(ko.isObservable(value)){\r\n            return value;\r\n        }\r\n\r\n        return convertProperty(obj, propertyName, value);\r\n    };\r\n\r\n    observableModule.defineProperty = defineProperty;\r\n    observableModule.convertProperty = convertProperty;\r\n    observableModule.convertObject = convertObject;\r\n\r\n    /**\r\n     * Installs the plugin into the view model binder's `beforeBind` hook so that objects are automatically converted before being bound.\r\n     * @method install\r\n     */\r\n    observableModule.install = function(options) {\r\n        var original = binder.binding;\r\n\r\n        binder.binding = function(obj, view, instruction) {\r\n            if(instruction.applyBindings && !instruction.skipConversion){\r\n                convertObject(obj);\r\n            }\r\n\r\n            original(obj, view);\r\n        };\r\n\r\n        logConversion = options.logConversion;\r\n        if (options.changeDetection) {\r\n            changeDetectionMethod = options.changeDetection;\r\n        }\r\n\r\n        skipPromises = options.skipPromises;\r\n        shouldIgnorePropertyName = options.shouldIgnorePropertyName || defaultShouldIgnorePropertyName;\r\n    };\r\n\r\n    return observableModule;\r\n});\r\n"]}