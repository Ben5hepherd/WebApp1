{"version":3,"sources":["durandal/plugins/serializer.js"],"names":["define","system","typeAttribute","space","undefined","replacer","key","value","first","serialize","object","settings","isString","isNumber","JSON","stringify","this","getTypeId","typeMap","registerType","arguments","length","id","getModuleId","reviver","getConstructor","typeId","ctor","fromJSON","deserialize","text","that","parse","clone","obj"],"mappings":"AAUAA,QAAQ,mBAAoB,SAASC,GAKjC,OAMIC,cAAe,OAMfC,MAAMC,OAQNC,SAAU,SAASC,EAAKC,GACpB,GAAGD,EAAI,CACH,GAAIE,GAAQF,EAAI,EAChB,IAAa,MAAVE,GAA2B,MAAVA,EAChB,OAIR,MAAOD,IASXE,UAAW,SAASC,EAAQC,GAOxB,MANAA,GAAyBP,SAAbO,KAA+BA,GAExCV,EAAOW,SAASD,IAAaV,EAAOY,SAASF,MAC5CA,GAAaR,MAAOQ,IAGjBG,KAAKC,UAAUL,EAAQC,EAASN,UAAYW,KAAKX,SAAUM,EAASR,OAASa,KAAKb,QAQ7Fc,UAAW,SAASP,GAChB,GAAIA,EACA,MAAOA,GAAOM,KAAKd,gBAS3BgB,WAOAC,aAAc,WACV,GAAIX,GAAQY,UAAU,EAEtB,IAAwB,GAApBA,UAAUC,OAAa,CACvB,GAAIC,GAAKd,EAAMQ,KAAKd,gBAAkBD,EAAOsB,YAAYf,EACzDQ,MAAKE,QAAQI,GAAMd,MAEnBQ,MAAKE,QAAQV,GAASY,UAAU,IAYxCI,QAAS,SAASlB,EAAKC,EAAOU,EAAWQ,GACrC,GAAIC,GAAST,EAAUV,EACvB,IAAImB,EAAQ,CACR,GAAIC,GAAOF,EAAeC,EAC1B,IAAIC,EACA,MAAIA,GAAKC,SACED,EAAKC,SAASrB,GAGlB,GAAIoB,GAAKpB,GAIxB,MAAOA,IASXsB,YAAa,SAASC,EAAMnB,GACxB,GAAIoB,GAAOf,IACXL,GAAWA,KAEX,IAAIM,GAAYN,EAASM,WAAa,SAASP,GAAU,MAAOqB,GAAKd,UAAUP,IAC3Ee,EAAiBd,EAASc,gBAAkB,SAASH,GAAM,MAAOS,GAAKb,QAAQI,IAC/EE,EAAUb,EAASa,SAAW,SAASlB,EAAKC,GAAS,MAAOwB,GAAKP,QAAQlB,EAAKC,EAAOU,EAAWQ,GAEpG,OAAOX,MAAKkB,MAAMF,EAAMN,IAS5BS,MAAM,SAASC,EAAKvB,GAChB,MAAOK,MAAKa,YAAYb,KAAKP,UAAUyB,EAAKvB,GAAWA","file":"../../../durandal/plugins/serializer.js","sourcesContent":["/**\r\n * Durandal 2.2.0 Copyright (c) 2010-2016 Blue Spire Consulting, Inc. All Rights Reserved.\r\n * Available via the MIT license.\r\n * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.\r\n */\r\n/**\r\n * Serializes and deserializes data to/from JSON.\r\n * @module serializer\r\n * @requires system\r\n */\r\ndefine(['durandal/system'], function(system) {\r\n    /**\r\n     * @class SerializerModule\r\n     * @static\r\n     */\r\n    return {\r\n        /**\r\n         * The name of the attribute that the serializer should use to identify an object's type.\r\n         * @property {string} typeAttribute\r\n         * @default type\r\n         */\r\n        typeAttribute: 'type',\r\n        /**\r\n         * The amount of space to use for indentation when writing out JSON.\r\n         * @property {string|number} space\r\n         * @default undefined\r\n         */\r\n        space:undefined,\r\n        /**\r\n         * The default replacer function used during serialization. By default properties starting with '_' or '$' are removed from the serialized object.\r\n         * @method replacer\r\n         * @param {string} key The object key to check.\r\n         * @param {object} value The object value to check.\r\n         * @return {object} The value to serialize.\r\n         */\r\n        replacer: function(key, value) {\r\n            if(key){\r\n                var first = key[0];\r\n                if(first === '_' || first === '$'){\r\n                    return undefined;\r\n                }\r\n            }\r\n\r\n            return value;\r\n        },\r\n        /**\r\n         * Serializes the object.\r\n         * @method serialize\r\n         * @param {object} object The object to serialize.\r\n         * @param {object} [settings] Settings can specify a replacer or space to override the serializer defaults.\r\n         * @return {string} The JSON string.\r\n         */\r\n        serialize: function(object, settings) {\r\n            settings = (settings === undefined) ? {} : settings;\r\n\r\n            if(system.isString(settings) || system.isNumber(settings)) {\r\n                settings = { space: settings };\r\n            }\r\n\r\n            return JSON.stringify(object, settings.replacer || this.replacer, settings.space || this.space);\r\n        },\r\n        /**\r\n         * Gets the type id for an object instance, using the configured `typeAttribute`.\r\n         * @method getTypeId\r\n         * @param {object} object The object to serialize.\r\n         * @return {string} The type.\r\n         */\r\n        getTypeId: function(object) {\r\n            if (object) {\r\n                return object[this.typeAttribute];\r\n            }\r\n\r\n            return undefined;\r\n        },\r\n        /**\r\n         * Maps type ids to object constructor functions. Keys are type ids and values are functions.\r\n         * @property {object} typeMap.\r\n         */\r\n        typeMap: {},\r\n        /**\r\n         * Adds a type id/constructor function mampping to the `typeMap`.\r\n         * @method registerType\r\n         * @param {string} typeId The type id.\r\n         * @param {function} constructor The constructor.\r\n         */\r\n        registerType: function() {\r\n            var first = arguments[0];\r\n\r\n            if (arguments.length == 1) {\r\n                var id = first[this.typeAttribute] || system.getModuleId(first);\r\n                this.typeMap[id] = first;\r\n            } else {\r\n                this.typeMap[first] = arguments[1];\r\n            }\r\n        },\r\n        /**\r\n         * The default reviver function used during deserialization. By default is detects type properties on objects and uses them to re-construct the correct object using the provided constructor mapping.\r\n         * @method reviver\r\n         * @param {string} key The attribute key.\r\n         * @param {object} value The object value associated with the key.\r\n         * @param {function} getTypeId A custom function used to get the type id from a value.\r\n         * @param {object} getConstructor A custom function used to get the constructor function associated with a type id.\r\n         * @return {object} The value.\r\n         */\r\n        reviver: function(key, value, getTypeId, getConstructor) {\r\n            var typeId = getTypeId(value);\r\n            if (typeId) {\r\n                var ctor = getConstructor(typeId);\r\n                if (ctor) {\r\n                    if (ctor.fromJSON) {\r\n                        return ctor.fromJSON(value);\r\n                    }\r\n\r\n                    return new ctor(value);\r\n                }\r\n            }\r\n\r\n            return value;\r\n        },\r\n        /**\r\n         * Deserialize the JSON.\r\n         * @method deserialize\r\n         * @param {string} text The JSON string.\r\n         * @param {object} [settings] Settings can specify a reviver, getTypeId function or getConstructor function.\r\n         * @return {object} The deserialized object.\r\n         */\r\n        deserialize: function(text, settings) {\r\n            var that = this;\r\n            settings = settings || {};\r\n\r\n            var getTypeId = settings.getTypeId || function(object) { return that.getTypeId(object); };\r\n            var getConstructor = settings.getConstructor || function(id) { return that.typeMap[id]; };\r\n            var reviver = settings.reviver || function(key, value) { return that.reviver(key, value, getTypeId, getConstructor); };\r\n\r\n            return JSON.parse(text, reviver);\r\n        },\r\n        /**\r\n         * Clone the object.\r\n         * @method clone\r\n         * @param {object} obj The object to clone.\r\n         * @param {object} [settings] Settings can specify any of the options allowed by the serialize or deserialize methods.\r\n         * @return {object} The new clone.\r\n         */\r\n        clone:function(obj, settings) {\r\n            return this.deserialize(this.serialize(obj, settings), settings);\r\n        }\r\n    };\r\n});\r\n"]}