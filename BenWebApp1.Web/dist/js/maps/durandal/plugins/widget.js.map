{"version":3,"sources":["durandal/plugins/widget.js"],"names":["define","system","composition","$","ko","extractParts","element","settings","data","utils","domData","get","widgetDataKey","parts","cloneNodes","virtualElements","childNodes","emptyNode","set","kindModuleMaps","kindViewMaps","bindableSettings","widget","getSettings","valueAccessor","unwrapObservable","isString","kind","attrName","arrayIndexOf","registerKind","bindingHandlers","init","controlsDescendantBindings","update","allBindingsAccessor","viewModel","bindingContext","create","allowedBindings","composeBindings","push","mapKind","viewId","moduleId","mapKindToModuleId","convertKindToModulePath","mapKindToViewId","convertKindToViewPath","createCompositionSettings","model","this","view","preserveContext","activate","activationData","mode","fromBinding","compositionSettings","compose","install","config","bindingName","kinds","toRegister","i","length"],"mappings":"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","file":"../../../durandal/plugins/widget.js","sourcesContent":["/**\r\n * Durandal 2.2.0 Copyright (c) 2010-2016 Blue Spire Consulting, Inc. All Rights Reserved.\r\n * Available via the MIT license.\r\n * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.\r\n */\r\n/**\r\n * Layers the widget sugar on top of the composition system.\r\n * @module widget\r\n * @requires system\r\n * @requires composition\r\n * @requires jquery\r\n * @requires knockout\r\n */\r\ndefine(['durandal/system', 'durandal/composition', 'jquery', 'knockout'], function(system, composition, $, ko) {\r\n    var kindModuleMaps = {},\r\n        kindViewMaps = {},\r\n        bindableSettings = ['model', 'view', 'kind'],\r\n        widgetDataKey = 'durandal-widget-data';\r\n\r\n    function extractParts(element, settings){\r\n        var data = ko.utils.domData.get(element, widgetDataKey);\r\n\r\n        if(!data){\r\n            data = {\r\n                parts:composition.cloneNodes(ko.virtualElements.childNodes(element))\r\n            };\r\n\r\n            ko.virtualElements.emptyNode(element);\r\n            ko.utils.domData.set(element, widgetDataKey, data);\r\n        }\r\n\r\n        settings.parts = data.parts;\r\n    }\r\n\r\n    /**\r\n     * @class WidgetModule\r\n     * @static\r\n     */\r\n    var widget = {\r\n        getSettings: function(valueAccessor) {\r\n            var settings = ko.utils.unwrapObservable(valueAccessor()) || {};\r\n\r\n            if (system.isString(settings)) {\r\n                return { kind: settings };\r\n            }\r\n\r\n            for (var attrName in settings) {\r\n                if (ko.utils.arrayIndexOf(bindableSettings, attrName) != -1) {\r\n                    settings[attrName] = ko.utils.unwrapObservable(settings[attrName]);\r\n                } else {\r\n                    settings[attrName] = settings[attrName];\r\n                }\r\n            }\r\n\r\n            return settings;\r\n        },\r\n        /**\r\n         * Creates a ko binding handler for the specified kind.\r\n         * @method registerKind\r\n         * @param {string} kind The kind to create a custom binding handler for.\r\n         */\r\n        registerKind: function(kind) {\r\n            ko.bindingHandlers[kind] = {\r\n                init: function() {\r\n                    return { controlsDescendantBindings: true };\r\n                },\r\n                update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                    var settings = widget.getSettings(valueAccessor);\r\n                    settings.kind = kind;\r\n                    extractParts(element, settings);\r\n                    widget.create(element, settings, bindingContext, true);\r\n                }\r\n            };\r\n\r\n            ko.virtualElements.allowedBindings[kind] = true;\r\n            composition.composeBindings.push(kind + ':');\r\n        },\r\n        /**\r\n         * Maps views and module to the kind identifier if a non-standard pattern is desired.\r\n         * @method mapKind\r\n         * @param {string} kind The kind name.\r\n         * @param {string} [viewId] The unconventional view id to map the kind to.\r\n         * @param {string} [moduleId] The unconventional module id to map the kind to.\r\n         */\r\n        mapKind: function(kind, viewId, moduleId) {\r\n            if (viewId) {\r\n                kindViewMaps[kind] = viewId;\r\n            }\r\n\r\n            if (moduleId) {\r\n                kindModuleMaps[kind] = moduleId;\r\n            }\r\n        },\r\n        /**\r\n         * Maps a kind name to it's module id. First it looks up a custom mapped kind, then falls back to `convertKindToModulePath`.\r\n         * @method mapKindToModuleId\r\n         * @param {string} kind The kind name.\r\n         * @return {string} The module id.\r\n         */\r\n        mapKindToModuleId: function(kind) {\r\n            return kindModuleMaps[kind] || widget.convertKindToModulePath(kind);\r\n        },\r\n        /**\r\n         * Converts a kind name to it's module path. Used to conventionally map kinds who aren't explicitly mapped through `mapKind`.\r\n         * @method convertKindToModulePath\r\n         * @param {string} kind The kind name.\r\n         * @return {string} The module path.\r\n         */\r\n        convertKindToModulePath: function(kind) {\r\n            return 'widgets/' + kind + '/viewmodel';\r\n        },\r\n        /**\r\n         * Maps a kind name to it's view id. First it looks up a custom mapped kind, then falls back to `convertKindToViewPath`.\r\n         * @method mapKindToViewId\r\n         * @param {string} kind The kind name.\r\n         * @return {string} The view id.\r\n         */\r\n        mapKindToViewId: function(kind) {\r\n            return kindViewMaps[kind] || widget.convertKindToViewPath(kind);\r\n        },\r\n        /**\r\n         * Converts a kind name to it's view id. Used to conventionally map kinds who aren't explicitly mapped through `mapKind`.\r\n         * @method convertKindToViewPath\r\n         * @param {string} kind The kind name.\r\n         * @return {string} The view id.\r\n         */\r\n        convertKindToViewPath: function(kind) {\r\n            return 'widgets/' + kind + '/view';\r\n        },\r\n        createCompositionSettings: function(element, settings) {\r\n            if (!settings.model) {\r\n                settings.model = this.mapKindToModuleId(settings.kind);\r\n            }\r\n\r\n            if (!settings.view) {\r\n                settings.view = this.mapKindToViewId(settings.kind);\r\n            }\r\n\r\n            settings.preserveContext = true;\r\n            settings.activate = true;\r\n            settings.activationData = settings;\r\n            settings.mode = 'templated';\r\n\r\n            return settings;\r\n        },\r\n        /**\r\n         * Creates a widget.\r\n         * @method create\r\n         * @param {DOMElement} element The DOMElement or knockout virtual element that serves as the target element for the widget.\r\n         * @param {object} settings The widget settings.\r\n         * @param {object} [bindingContext] The current binding context.\r\n         */\r\n        create: function(element, settings, bindingContext, fromBinding) {\r\n            if(!fromBinding){\r\n                settings = widget.getSettings(function() { return settings; }, element);\r\n            }\r\n\r\n            var compositionSettings = widget.createCompositionSettings(element, settings);\r\n\r\n            composition.compose(element, compositionSettings, bindingContext);\r\n        },\r\n        /**\r\n         * Installs the widget module by adding the widget binding handler and optionally registering kinds.\r\n         * @method install\r\n         * @param {object} config The module config. Add a `kinds` array with the names of widgets to automatically register. You can also specify a `bindingName` if you wish to use another name for the widget binding, such as \"control\" for example.\r\n         */\r\n        install:function(config){\r\n            config.bindingName = config.bindingName || 'widget';\r\n\r\n            if(config.kinds){\r\n                var toRegister = config.kinds;\r\n\r\n                for(var i = 0; i < toRegister.length; i++){\r\n                    widget.registerKind(toRegister[i]);\r\n                }\r\n            }\r\n\r\n            ko.bindingHandlers[config.bindingName] = {\r\n                init: function() {\r\n                    return { controlsDescendantBindings: true };\r\n                },\r\n                update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                    var settings = widget.getSettings(valueAccessor);\r\n                    extractParts(element, settings);\r\n                    widget.create(element, settings, bindingContext, true);\r\n                }\r\n            };\r\n\r\n            composition.composeBindings.push(config.bindingName + ':');\r\n            ko.virtualElements.allowedBindings[config.bindingName] = true;\r\n        }\r\n    };\r\n\r\n    return widget;\r\n});\r\n"]}