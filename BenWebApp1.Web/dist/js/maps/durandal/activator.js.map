{"version":3,"sources":["durandal/activator.js"],"names":["define","system","ko","ensureSettings","settings","undefined","isBoolean","closeOnDeactivate","activator","defaults","beforeActivate","afterDeactivate","affirmations","interpretResponse","areSameItem","findChildActivator","invoke","target","method","data","isArray","apply","deactivate","item","close","dfd","setter","log","result","error","message","resolve","then","reason","activate","newItem","activeItem","callback","activationData","canDeactivateItem","options","extend","defaultOptions","lifecycleData","defer","continueCanDeactivate","canDeactivate","resultOrPromise","childActivator","promise","canActivateItem","activeData","newActivationData","canActivate","createActivator","initialActiveItem","observable","computed","read","write","newValue","viaSetter","activateItem","__activator__","isActivating","forceActiveItem","deactivateItem","notifySubscribers","currentItem","dfd2","toCheck","toActivate","includeIn","forItems","items","determineNextItemToActivate","list","lastIndex","toRemoveAt","length","index","indexOf","push","oldItem","remove","originalCanDeactivate","finish","j","results","i","originalDeactivate","doDeactivate","setTimeout","listLength","activatorSettings","value","isObject","can","isString","utils","arrayIndexOf","this","toLowerCase","currentActivationData","create","isActivator","object"],"mappings":"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","file":"../../durandal/activator.js","sourcesContent":["/**\r\n * Durandal 2.2.0 Copyright (c) 2010-2016 Blue Spire Consulting, Inc. All Rights Reserved.\r\n * Available via the MIT license.\r\n * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.\r\n */\r\n/**\r\n * The activator module encapsulates all logic related to screen/component activation.\r\n * An activator is essentially an asynchronous state machine that understands a particular state transition protocol.\r\n * The protocol ensures that the following series of events always occur: `canDeactivate` (previous state), `canActivate` (new state), `deactivate` (previous state), `activate` (new state).\r\n * Each of the _can_ callbacks may return a boolean, affirmative value or promise for one of those. If either of the _can_ functions yields a false result, then activation halts.\r\n * @module activator\r\n * @requires system\r\n * @requires knockout\r\n */\r\ndefine(['durandal/system', 'knockout'], function (system, ko) {\r\n    var activator;\r\n    var defaultOptions = {\r\n        canDeactivate:true\r\n    };\r\n\r\n    function ensureSettings(settings) {\r\n        if (settings == undefined) {\r\n            settings = {};\r\n        }\r\n\r\n        if (!system.isBoolean(settings.closeOnDeactivate)) {\r\n            settings.closeOnDeactivate = activator.defaults.closeOnDeactivate;\r\n        }\r\n\r\n        if (!settings.beforeActivate) {\r\n            settings.beforeActivate = activator.defaults.beforeActivate;\r\n        }\r\n\r\n        if (!settings.afterDeactivate) {\r\n            settings.afterDeactivate = activator.defaults.afterDeactivate;\r\n        }\r\n\r\n        if(!settings.affirmations){\r\n            settings.affirmations = activator.defaults.affirmations;\r\n        }\r\n\r\n        if (!settings.interpretResponse) {\r\n            settings.interpretResponse = activator.defaults.interpretResponse;\r\n        }\r\n\r\n        if (!settings.areSameItem) {\r\n            settings.areSameItem = activator.defaults.areSameItem;\r\n        }\r\n\r\n        if (!settings.findChildActivator) {\r\n            settings.findChildActivator = activator.defaults.findChildActivator;\r\n        }\r\n\r\n        return settings;\r\n    }\r\n\r\n    function invoke(target, method, data) {\r\n        if (system.isArray(data)) {\r\n            return target[method].apply(target, data);\r\n        }\r\n\r\n        return target[method](data);\r\n    }\r\n\r\n    function deactivate(item, close, settings, dfd, setter) {\r\n        if (item && item.deactivate) {\r\n            system.log('Deactivating', item);\r\n\r\n            var result;\r\n            try {\r\n                result = item.deactivate(close);\r\n            } catch(error) {\r\n                system.log('ERROR: ' + error.message, error);\r\n                dfd.resolve(false);\r\n                return;\r\n            }\r\n\r\n            if (result && result.then) {\r\n                result.then(function() {\r\n                    settings.afterDeactivate(item, close, setter);\r\n                    dfd.resolve(true);\r\n                }, function(reason) {\r\n                    if (reason) {\r\n                        system.log(reason);\r\n                    }\r\n\r\n                    dfd.resolve(false);\r\n                });\r\n            } else {\r\n                settings.afterDeactivate(item, close, setter);\r\n                dfd.resolve(true);\r\n            }\r\n        } else {\r\n            if (item) {\r\n                settings.afterDeactivate(item, close, setter);\r\n            }\r\n\r\n            dfd.resolve(true);\r\n        }\r\n    }\r\n\r\n    function activate(newItem, activeItem, callback, activationData) {\r\n        var result;\r\n\r\n        if(newItem && newItem.activate) {\r\n            system.log('Activating', newItem);\r\n\r\n            try {\r\n                result = invoke(newItem, 'activate', activationData);\r\n            } catch (error) {\r\n                system.log('ERROR: ' + error.message, error);\r\n                callback(false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if(result && result.then) {\r\n            result.then(function() {\r\n                activeItem(newItem);\r\n                callback(true);\r\n            }, function (reason) {\r\n                if (reason) {\r\n                    system.log('ERROR: ' + reason.message, reason);\r\n                }\r\n\r\n                callback(false);\r\n            });\r\n        } else {\r\n            activeItem(newItem);\r\n            callback(true);\r\n        }\r\n    }\r\n\r\n    function canDeactivateItem(item, close, settings, options) {\r\n        options = system.extend({}, defaultOptions, options);\r\n        settings.lifecycleData = null;\r\n\r\n        return system.defer(function (dfd) {\r\n            function continueCanDeactivate() {\r\n                if (item && item.canDeactivate && options.canDeactivate) {\r\n                    var resultOrPromise;\r\n                    try {\r\n                        resultOrPromise = item.canDeactivate(close);\r\n                    } catch (error) {\r\n                        system.log('ERROR: ' + error.message, error);\r\n                        dfd.resolve(false);\r\n                        return;\r\n                    }\r\n\r\n                    if (resultOrPromise.then) {\r\n                        resultOrPromise.then(function (result) {\r\n                            settings.lifecycleData = result;\r\n                            dfd.resolve(settings.interpretResponse(result));\r\n                        }, function (reason) {\r\n                            if (reason) {\r\n                                system.log('ERROR: ' + reason.message, reason);\r\n                            }\r\n\r\n                            dfd.resolve(false);\r\n                        });\r\n                    } else {\r\n                        settings.lifecycleData = resultOrPromise;\r\n                        dfd.resolve(settings.interpretResponse(resultOrPromise));\r\n                    }\r\n                } else {\r\n                    dfd.resolve(true);\r\n                }\r\n            }\r\n\r\n            var childActivator = settings.findChildActivator(item);\r\n            if (childActivator) {\r\n                childActivator.canDeactivate().then(function(result) {\r\n                    if (result) {\r\n                        continueCanDeactivate();\r\n                    } else {\r\n                        dfd.resolve(false);\r\n                    }\r\n                });\r\n            } else {\r\n                continueCanDeactivate();\r\n            }\r\n        }).promise();\r\n    };\r\n\r\n    function canActivateItem(newItem, activeItem, settings, activeData, newActivationData) {\r\n        settings.lifecycleData = null;\r\n\r\n        return system.defer(function (dfd) {\r\n            if (settings.areSameItem(activeItem(), newItem, activeData, newActivationData)) {\r\n                dfd.resolve(true);\r\n                return;\r\n            }\r\n\r\n            if (newItem && newItem.canActivate) {\r\n                var resultOrPromise;\r\n                try {\r\n                    resultOrPromise = invoke(newItem, 'canActivate', newActivationData);\r\n                } catch (error) {\r\n                    system.log('ERROR: ' + error.message, error);\r\n                    dfd.resolve(false);\r\n                    return;\r\n                }\r\n\r\n                if (resultOrPromise.then) {\r\n                    resultOrPromise.then(function(result) {\r\n                        settings.lifecycleData = result;\r\n                        dfd.resolve(settings.interpretResponse(result));\r\n                    }, function(reason) {\r\n                        if (reason) {\r\n                            system.log('ERROR: ' + reason.message, reason);\r\n                        }\r\n\r\n                        dfd.resolve(false);\r\n                    });\r\n                } else {\r\n                    settings.lifecycleData = resultOrPromise;\r\n                    dfd.resolve(settings.interpretResponse(resultOrPromise));\r\n                }\r\n            } else {\r\n                dfd.resolve(true);\r\n            }\r\n        }).promise();\r\n    };\r\n\r\n    /**\r\n     * An activator is a read/write computed observable that enforces the activation lifecycle whenever changing values.\r\n     * @class Activator\r\n     */\r\n    function createActivator(initialActiveItem, settings) {\r\n        var activeItem = ko.observable(null);\r\n        var activeData;\r\n\r\n        settings = ensureSettings(settings);\r\n\r\n        var computed = ko.computed({\r\n            read: function () {\r\n                return activeItem();\r\n            },\r\n            write: function (newValue) {\r\n                computed.viaSetter = true;\r\n                computed.activateItem(newValue);\r\n            }\r\n        });\r\n\r\n        computed.__activator__ = true;\r\n\r\n        /**\r\n         * The settings for this activator.\r\n         * @property {ActivatorSettings} settings\r\n         */\r\n        computed.settings = settings;\r\n        settings.activator = computed;\r\n\r\n        /**\r\n         * An observable which indicates whether or not the activator is currently in the process of activating an instance.\r\n         * @method isActivating\r\n         * @return {boolean}\r\n         */\r\n        computed.isActivating = ko.observable(false);\r\n\r\n        computed.forceActiveItem = function (item) {\r\n            activeItem(item);\r\n        };\r\n\r\n        /**\r\n         * Determines whether or not the specified item can be deactivated.\r\n         * @method canDeactivateItem\r\n         * @param {object} item The item to check.\r\n         * @param {boolean} close Whether or not to check if close is possible.\r\n         * @param {object} options Options for controlling the activation process.\r\n         * @return {promise}\r\n         */\r\n        computed.canDeactivateItem = function (item, close, options) {\r\n            return canDeactivateItem(item, close, settings, options);\r\n        };\r\n\r\n        /**\r\n         * Deactivates the specified item.\r\n         * @method deactivateItem\r\n         * @param {object} item The item to deactivate.\r\n         * @param {boolean} close Whether or not to close the item.\r\n         * @return {promise}\r\n         */\r\n        computed.deactivateItem = function (item, close) {\r\n            return system.defer(function(dfd) {\r\n                computed.canDeactivateItem(item, close).then(function(canDeactivate) {\r\n                    if (canDeactivate) {\r\n                        deactivate(item, close, settings, dfd, activeItem);\r\n                    } else {\r\n                        computed.notifySubscribers();\r\n                        dfd.resolve(false);\r\n                    }\r\n                });\r\n            }).promise();\r\n        };\r\n\r\n        /**\r\n         * Determines whether or not the specified item can be activated.\r\n         * @method canActivateItem\r\n         * @param {object} item The item to check.\r\n         * @param {object} activationData Data associated with the activation.\r\n         * @return {promise}\r\n         */\r\n        computed.canActivateItem = function (newItem, activationData) {\r\n            return canActivateItem(newItem, activeItem, settings, activeData, activationData);\r\n        };\r\n\r\n        /**\r\n         * Activates the specified item.\r\n         * @method activateItem\r\n         * @param {object} newItem The item to activate.\r\n         * @param {object} newActivationData Data associated with the activation.\r\n         * @param {object} options Options for controlling the activation process.\r\n         * @return {promise}\r\n         */\r\n        computed.activateItem = function (newItem, newActivationData, options) {\r\n            var viaSetter = computed.viaSetter;\r\n            computed.viaSetter = false;\r\n\r\n            return system.defer(function (dfd) {\r\n                if (computed.isActivating()) {\r\n                    dfd.resolve(false);\r\n                    return;\r\n                }\r\n\r\n                computed.isActivating(true);\r\n\r\n                var currentItem = activeItem();\r\n                if (settings.areSameItem(currentItem, newItem, activeData, newActivationData)) {\r\n                    computed.isActivating(false);\r\n                    dfd.resolve(true);\r\n                    return;\r\n                }\r\n\r\n                computed.canDeactivateItem(currentItem, settings.closeOnDeactivate, options).then(function (canDeactivate) {\r\n                    if (canDeactivate) {\r\n                        computed.canActivateItem(newItem, newActivationData).then(function (canActivate) {\r\n                            if (canActivate) {\r\n                                system.defer(function (dfd2) {\r\n                                    deactivate(currentItem, settings.closeOnDeactivate, settings, dfd2);\r\n                                }).promise().then(function () {\r\n                                        newItem = settings.beforeActivate(newItem, newActivationData);\r\n                                        activate(newItem, activeItem, function (result) {\r\n                                            activeData = newActivationData;\r\n                                            computed.isActivating(false);\r\n                                            dfd.resolve(result);\r\n                                        }, newActivationData);\r\n                                    });\r\n                            } else {\r\n                                if (viaSetter) {\r\n                                    computed.notifySubscribers();\r\n                                }\r\n\r\n                                computed.isActivating(false);\r\n                                dfd.resolve(false);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        if (viaSetter) {\r\n                            computed.notifySubscribers();\r\n                        }\r\n\r\n                        computed.isActivating(false);\r\n                        dfd.resolve(false);\r\n                    }\r\n                });\r\n            }).promise();\r\n        };\r\n\r\n        /**\r\n         * Determines whether or not the activator, in its current state, can be activated.\r\n         * @method canActivate\r\n         * @return {promise}\r\n         */\r\n        computed.canActivate = function () {\r\n            var toCheck;\r\n\r\n            if (initialActiveItem) {\r\n                toCheck = initialActiveItem;\r\n                initialActiveItem = false;\r\n            } else {\r\n                toCheck = computed();\r\n            }\r\n\r\n            return computed.canActivateItem(toCheck);\r\n        };\r\n\r\n        /**\r\n         * Activates the activator, in its current state.\r\n         * @method activate\r\n         * @return {promise}\r\n         */\r\n        computed.activate = function () {\r\n            var toActivate;\r\n\r\n            if (initialActiveItem) {\r\n                toActivate = initialActiveItem;\r\n                initialActiveItem = false;\r\n            } else {\r\n                toActivate = computed();\r\n            }\r\n\r\n            return computed.activateItem(toActivate);\r\n        };\r\n\r\n        /**\r\n         * Determines whether or not the activator, in its current state, can be deactivated.\r\n         * @method canDeactivate\r\n         * @return {promise}\r\n         */\r\n        computed.canDeactivate = function (close) {\r\n            return computed.canDeactivateItem(computed(), close);\r\n        };\r\n\r\n        /**\r\n         * Deactivates the activator, in its current state.\r\n         * @method deactivate\r\n         * @return {promise}\r\n         */\r\n        computed.deactivate = function (close) {\r\n            return computed.deactivateItem(computed(), close);\r\n        };\r\n\r\n        computed.includeIn = function (includeIn) {\r\n            includeIn.canActivate = function () {\r\n                return computed.canActivate();\r\n            };\r\n\r\n            includeIn.activate = function () {\r\n                return computed.activate();\r\n            };\r\n\r\n            includeIn.canDeactivate = function (close) {\r\n                return computed.canDeactivate(close);\r\n            };\r\n\r\n            includeIn.deactivate = function (close) {\r\n                return computed.deactivate(close);\r\n            };\r\n        };\r\n\r\n        if (settings.includeIn) {\r\n            computed.includeIn(settings.includeIn);\r\n        } else if (initialActiveItem) {\r\n            computed.activate();\r\n        }\r\n\r\n        computed.forItems = function (items) {\r\n            settings.closeOnDeactivate = false;\r\n\r\n            settings.determineNextItemToActivate = function (list, lastIndex) {\r\n                var toRemoveAt = lastIndex - 1;\r\n\r\n                if (toRemoveAt == -1 && list.length > 1) {\r\n                    return list[1];\r\n                }\r\n\r\n                if (toRemoveAt > -1 && toRemoveAt < list.length - 1) {\r\n                    return list[toRemoveAt];\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            settings.beforeActivate = function (newItem) {\r\n                var currentItem = computed();\r\n\r\n                if (!newItem) {\r\n                    newItem = settings.determineNextItemToActivate(items, currentItem ? items.indexOf(currentItem) : 0);\r\n                } else {\r\n                    var index = items.indexOf(newItem);\r\n\r\n                    if (index == -1) {\r\n                        items.push(newItem);\r\n                    } else {\r\n                        newItem = items()[index];\r\n                    }\r\n                }\r\n\r\n                return newItem;\r\n            };\r\n\r\n            settings.afterDeactivate = function (oldItem, close) {\r\n                if (close) {\r\n                    items.remove(oldItem);\r\n                }\r\n            };\r\n\r\n            var originalCanDeactivate = computed.canDeactivate;\r\n            computed.canDeactivate = function (close) {\r\n                if (close) {\r\n                    return system.defer(function (dfd) {\r\n                        var list = items();\r\n                        var results = [];\r\n\r\n                        function finish() {\r\n                            for (var j = 0; j < results.length; j++) {\r\n                                if (!results[j]) {\r\n                                    dfd.resolve(false);\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            dfd.resolve(true);\r\n                        }\r\n\r\n                        for (var i = 0; i < list.length; i++) {\r\n                            computed.canDeactivateItem(list[i], close).then(function (result) {\r\n                                results.push(result);\r\n                                if (results.length == list.length) {\r\n                                    finish();\r\n                                }\r\n                            });\r\n                        }\r\n                    }).promise();\r\n                } else {\r\n                    return originalCanDeactivate();\r\n                }\r\n            };\r\n\r\n            var originalDeactivate = computed.deactivate;\r\n            computed.deactivate = function (close) {\r\n                if (close) {\r\n                    return system.defer(function (dfd) {\r\n                        var list = items();\r\n                        var results = 0;\r\n                        var listLength = list.length;\r\n\r\n                        function doDeactivate(item) {\r\n                            setTimeout(function () {\r\n                                computed.deactivateItem(item, close).then(function () {\r\n                                    results++;\r\n                                    items.remove(item);\r\n                                    if (results == listLength) {\r\n                                        dfd.resolve();\r\n                                    }\r\n                                });\r\n                            }, 1);\r\n                        }\r\n\r\n                        for (var i = 0; i < listLength; i++) {\r\n                            doDeactivate(list[i]);\r\n                        }\r\n                    }).promise();\r\n                } else {\r\n                    return originalDeactivate();\r\n                }\r\n            };\r\n\r\n            return computed;\r\n        };\r\n\r\n        return computed;\r\n    }\r\n\r\n    /**\r\n     * @class ActivatorSettings\r\n     * @static\r\n     */\r\n    var activatorSettings = {\r\n        /**\r\n         * The default value passed to an object's deactivate function as its close parameter.\r\n         * @property {boolean} closeOnDeactivate\r\n         * @default true\r\n         */\r\n        closeOnDeactivate: true,\r\n        /**\r\n         * Lower-cased words which represent a truthy value.\r\n         * @property {string[]} affirmations\r\n         * @default ['yes', 'ok', 'true']\r\n         */\r\n        affirmations: ['yes', 'ok', 'true'],\r\n        /**\r\n         * Interprets the response of a `canActivate` or `canDeactivate` call using the known affirmative values in the `affirmations` array.\r\n         * @method interpretResponse\r\n         * @param {object} value\r\n         * @return {boolean}\r\n         */\r\n        interpretResponse: function(value) {\r\n            if(system.isObject(value)) {\r\n                value = value.can || false;\r\n            }\r\n\r\n            if(system.isString(value)) {\r\n                return ko.utils.arrayIndexOf(this.affirmations, value.toLowerCase()) !== -1;\r\n            }\r\n\r\n            return value;\r\n        },\r\n        /**\r\n         * Determines whether or not the current item and the new item are the same.\r\n         * @method areSameItem\r\n         * @param {object} currentItem\r\n         * @param {object} newItem\r\n         * @param {object} currentActivationData\r\n         * @param {object} newActivationData\r\n         * @return {boolean}\r\n         */\r\n        areSameItem: function(currentItem, newItem, currentActivationData, newActivationData) {\r\n            return currentItem == newItem;\r\n        },\r\n        /**\r\n         * Called immediately before the new item is activated.\r\n         * @method beforeActivate\r\n         * @param {object} newItem\r\n         */\r\n        beforeActivate: function(newItem) {\r\n            return newItem;\r\n        },\r\n        /**\r\n         * Called immediately after the old item is deactivated.\r\n         * @method afterDeactivate\r\n         * @param {object} oldItem The previous item.\r\n         * @param {boolean} close Whether or not the previous item was closed.\r\n         * @param {function} setter The activate item setter function.\r\n         */\r\n        afterDeactivate: function(oldItem, close, setter) {\r\n            if(close && setter) {\r\n                setter(null);\r\n            }\r\n        },\r\n        findChildActivator: function(item){\r\n            return null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @class ActivatorModule\r\n     * @static\r\n     */\r\n    activator = {\r\n        /**\r\n         * The default settings used by activators.\r\n         * @property {ActivatorSettings} defaults\r\n         */\r\n        defaults: activatorSettings,\r\n        /**\r\n         * Creates a new activator.\r\n         * @method create\r\n         * @param {object} [initialActiveItem] The item which should be immediately activated upon creation of the ativator.\r\n         * @param {ActivatorSettings} [settings] Per activator overrides of the default activator settings.\r\n         * @return {Activator} The created activator.\r\n         */\r\n        create: createActivator,\r\n        /**\r\n         * Determines whether or not the provided object is an activator or not.\r\n         * @method isActivator\r\n         * @param {object} object Any object you wish to verify as an activator or not.\r\n         * @return {boolean} True if the object is an activator; false otherwise.\r\n         */\r\n        isActivator:function(object){\r\n            return object && object.__activator__;\r\n        }\r\n    };\r\n\r\n    return activator;\r\n});\r\n"]}