{"version":3,"sources":["durandal/composition.js"],"names":["define","system","viewLocator","binder","viewEngine","activator","$","ko","onError","context","error","element","e","endComposition","getHostState","parent","elements","state","childElements","activeView","child","virtualElements","firstChild","nodeType","push","getAttribute","activeViewAttributeName","nextSibling","compositionCount","callBacks","compositionCompleteCallbacks","setTimeout","i","length","cleanUp","viewElements","tryActivate","successCallback","skipActivation","activate","model","result","isArray","activationData","apply","then","reason","undefined","triggerAttach","this","removeAttribute","attached","composingNewView","alwaysTriggerAttach","setAttribute","detached","utils","domNodeDisposal","addDisposeCallback","e2","noop","shouldTransition","isString","transition","skipTransitionOnSameViewId","currentViewId","newViewId","cloneNodes","nodesArray","j","newNodesArray","clonedNode","cloneNode","replaceParts","parts","replacementParts","composition","getParts","standardParts","partId","toReplace","get","parentNode","replaceChild","log","removePreviousView","len","children","childNodes","arrayChildren","removeNode","hide","view","domData","set","visibilityKey","style","display","show","displayStyle","hasComposition","dataBind","composeBindings","indexOf","dummyModel","compositionDataKey","partAttributeName","bindableSettings","compositionTransaction","complete","callback","convertTransitionToModuleId","name","defaultTransitionName","current","addBindingHandler","config","initOptionsFactory","key","handler","dataKey","bindingHandlers","init","valueAccessor","allBindingsAccessor","viewModel","bindingContext","data","trigger","observable","update","id","hasChildNodes","finalize","transitionModuleId","acquire","cacheViews","instruction","getBindingInstruction","emptyNode","fail","err","message","bindAndShow","__composition_context","arrayIndexOf","binding","preserveContext","prepend","bindContext","as","modelToBind","currentModel","dataFor","createView","recreatedView","bind","defaultStrategy","locateViewForObject","area","getSettings","moduleId","value","settings","unwrapObservable","activatorPresent","isActivator","isViewUrl","getModuleId","attrName","executeStrategy","strategy","inject","locateView","compose","fromBinding","compositionComplete","hostState","module","resolveObject","controlsDescendantBindings","mode","ensureSingleElement","allowedBindings"],"mappings":"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","file":"../../durandal/composition.js","sourcesContent":["/**\r\n * Durandal 2.2.0 Copyright (c) 2010-2016 Blue Spire Consulting, Inc. All Rights Reserved.\r\n * Available via the MIT license.\r\n * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.\r\n */\r\n/**\r\n * The composition module encapsulates all functionality related to visual composition.\r\n * @module composition\r\n * @requires system\r\n * @requires viewLocator\r\n * @requires binder\r\n * @requires viewEngine\r\n * @requires activator\r\n * @requires jquery\r\n * @requires knockout\r\n */\r\ndefine(['durandal/system', 'durandal/viewLocator', 'durandal/binder', 'durandal/viewEngine', 'durandal/activator', 'jquery', 'knockout'], function (system, viewLocator, binder, viewEngine, activator, $, ko) {\r\n    var dummyModel = {},\r\n        activeViewAttributeName = 'data-active-view',\r\n        composition,\r\n        compositionCompleteCallbacks = [],\r\n        compositionCount = 0,\r\n        compositionDataKey = 'durandal-composition-data',\r\n        partAttributeName = 'data-part',\r\n        bindableSettings = ['model', 'view', 'transition', 'area', 'strategy', 'activationData', 'onError'],\r\n        visibilityKey = \"durandal-visibility-data\",\r\n        composeBindings = ['compose:'];\r\n    \r\n    function onError(context, error, element) {\r\n        try {\r\n            if (context.onError) {\r\n                try {\r\n                    context.onError(error, element);\r\n                } catch (e) {\r\n                    system.error(e);\r\n                }\r\n            } else {\r\n                system.error(error);\r\n            }\r\n        } finally {\r\n            endComposition(context, element, true);\r\n        }\r\n    }\r\n\r\n    function getHostState(parent) {\r\n        var elements = [];\r\n        var state = {\r\n            childElements: elements,\r\n            activeView: null\r\n        };\r\n\r\n        var child = ko.virtualElements.firstChild(parent);\r\n\r\n        while (child) {\r\n            if (child.nodeType == 1) {\r\n                elements.push(child);\r\n                if (child.getAttribute(activeViewAttributeName)) {\r\n                    state.activeView = child;\r\n                }\r\n            }\r\n\r\n            child = ko.virtualElements.nextSibling(child);\r\n        }\r\n\r\n        if(!state.activeView){\r\n            state.activeView = elements[0];\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n    function endComposition(context, element, error) {\r\n        compositionCount--;\r\n\r\n        if(compositionCount === 0) {\r\n            var callBacks = compositionCompleteCallbacks;\r\n            compositionCompleteCallbacks = [];\r\n            \r\n            if (!error) {\r\n                setTimeout(function () {\r\n                    var i = callBacks.length;\r\n\r\n                    while (i--) {\r\n                        try {\r\n                            callBacks[i]();\r\n                        } catch (e) {\r\n                            onError(context, e, element);\r\n                        }\r\n                    }\r\n                }, 1);\r\n            }\r\n        }\r\n\r\n        cleanUp(context);\r\n    }\r\n\r\n    function cleanUp(context){\r\n        delete context.activeView;\r\n        delete context.viewElements;\r\n    }\r\n\r\n    function tryActivate(context, successCallback, skipActivation, element) {\r\n        if(skipActivation){\r\n            successCallback();\r\n        } else if (context.activate && context.model && context.model.activate) {\r\n            var result;\r\n\r\n            try{\r\n                if(system.isArray(context.activationData)) {\r\n                    result = context.model.activate.apply(context.model, context.activationData);\r\n                } else {\r\n                    result = context.model.activate(context.activationData);\r\n                }\r\n\r\n                if(result && result.then) {\r\n                    result.then(successCallback, function(reason) {\r\n                        onError(context, reason, element);\r\n                        successCallback();\r\n                    });\r\n                } else if(result || result === undefined) {\r\n                    successCallback();\r\n                } else {\r\n                    endComposition(context, element);\r\n                }\r\n            }\r\n            catch(e){\r\n                onError(context, e, element);\r\n            }\r\n        } else {\r\n            successCallback();\r\n        }\r\n    }\r\n\r\n    function triggerAttach(context, element) {\r\n        var context = this;\r\n\r\n        if (context.activeView) {\r\n            context.activeView.removeAttribute(activeViewAttributeName);\r\n        }\r\n\r\n        if (context.child) {\r\n            try{\r\n                if (context.model && context.model.attached) {\r\n                    if (context.composingNewView || context.alwaysTriggerAttach) {\r\n                        context.model.attached(context.child, context.parent, context);\r\n                    }\r\n                }\r\n\r\n                if (context.attached) {\r\n                    context.attached(context.child, context.parent, context);\r\n                }\r\n\r\n                context.child.setAttribute(activeViewAttributeName, true);\r\n\r\n                if (context.composingNewView && context.model && context.model.detached) {\r\n                    ko.utils.domNodeDisposal.addDisposeCallback(context.child, function () {\r\n                        try{\r\n                            context.model.detached(context.child, context.parent, context);\r\n                        }catch(e2){\r\n                            onError(context, e2, element);\r\n                        }\r\n                    });\r\n                }\r\n            }catch(e){\r\n                onError(context, e, element);\r\n            }\r\n        }\r\n\r\n        context.triggerAttach = system.noop;\r\n    }\r\n\r\n    function shouldTransition(context) {\r\n        if (system.isString(context.transition)) {\r\n            if (context.activeView) {\r\n                if (context.activeView == context.child) {\r\n                    return false;\r\n                }\r\n\r\n                if (!context.child) {\r\n                    return true;\r\n                }\r\n\r\n                if (context.skipTransitionOnSameViewId) {\r\n                    var currentViewId = context.activeView.getAttribute('data-view');\r\n                    var newViewId = context.child.getAttribute('data-view');\r\n                    return currentViewId != newViewId;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function cloneNodes(nodesArray) {\r\n        for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {\r\n            var clonedNode = nodesArray[i].cloneNode(true);\r\n            newNodesArray.push(clonedNode);\r\n        }\r\n        return newNodesArray;\r\n    }\r\n\r\n    function replaceParts(context){\r\n        var parts = cloneNodes(context.parts);\r\n        var replacementParts = composition.getParts(parts);\r\n        var standardParts = composition.getParts(context.child);\r\n\r\n        for (var partId in replacementParts) {\r\n            var toReplace = standardParts[partId];\r\n            if (!toReplace) {\r\n                toReplace = $('[data-part=\"' + partId + '\"]', context.child).get(0);\r\n                if (!toReplace) {\r\n                    system.log('Could not find part to override: ' + partId);\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            toReplace.parentNode.replaceChild(replacementParts[partId], toReplace);\r\n        }\r\n    }\r\n\r\n    function removePreviousView(context){\r\n        var children = ko.virtualElements.childNodes(context.parent), i, len;\r\n\r\n        if(!system.isArray(children)){\r\n            var arrayChildren = [];\r\n            for(i = 0, len = children.length; i < len; i++){\r\n                arrayChildren[i] = children[i];\r\n            }\r\n            children = arrayChildren;\r\n        }\r\n\r\n        for(i = 1,len = children.length; i < len; i++){\r\n            ko.removeNode(children[i]);\r\n        }\r\n    }\r\n\r\n    function hide(view) {\r\n        ko.utils.domData.set(view, visibilityKey, view.style.display);\r\n        view.style.display = 'none';\r\n    }\r\n\r\n    function show(view) {\r\n        var displayStyle = ko.utils.domData.get(view, visibilityKey);\r\n        view.style.display = displayStyle === 'none' ? 'block' : displayStyle;\r\n    }\r\n\r\n    function hasComposition(element){\r\n        var dataBind = element.getAttribute('data-bind');\r\n        if(!dataBind){\r\n            return false;\r\n        }\r\n\r\n        for(var i = 0, length = composeBindings.length; i < length; i++){\r\n            if(dataBind.indexOf(composeBindings[i]) > -1){\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @class CompositionTransaction\r\n     * @static\r\n     */\r\n    var compositionTransaction = {\r\n        /**\r\n         * Registers a callback which will be invoked when the current composition transaction has completed. The transaction includes all parent and children compositions.\r\n         * @method complete\r\n         * @param {function} callback The callback to be invoked when composition is complete.\r\n         */\r\n        complete: function (callback) {\r\n            compositionCompleteCallbacks.push(callback);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @class CompositionModule\r\n     * @static\r\n     */\r\n    composition = {\r\n        /**\r\n         * An array of all the binding handler names (includeing :) that trigger a composition.\r\n         * @property {string} composeBindings\r\n         * @default ['compose:']\r\n         */\r\n        composeBindings:composeBindings,\r\n        /**\r\n         * Converts a transition name to its moduleId.\r\n         * @method convertTransitionToModuleId\r\n         * @param {string} name The name of the transtion.\r\n         * @return {string} The moduleId.\r\n         */\r\n        convertTransitionToModuleId: function (name) {\r\n            return 'transitions/' + name;\r\n        },\r\n        /**\r\n         * The name of the transition to use in all compositions.\r\n         * @property {string} defaultTransitionName\r\n         * @default null\r\n         */\r\n        defaultTransitionName: null,\r\n        /**\r\n         * Represents the currently executing composition transaction.\r\n         * @property {CompositionTransaction} current\r\n         */\r\n        current: compositionTransaction,\r\n        /**\r\n         * Registers a binding handler that will be invoked when the current composition transaction is complete.\r\n         * @method addBindingHandler\r\n         * @param {string} name The name of the binding handler.\r\n         * @param {object} [config] The binding handler instance. If none is provided, the name will be used to look up an existing handler which will then be converted to a composition handler.\r\n         * @param {function} [initOptionsFactory] If the registered binding needs to return options from its init call back to knockout, this function will server as a factory for those options. It will receive the same parameters that the init function does.\r\n         */\r\n        addBindingHandler:function(name, config, initOptionsFactory){\r\n            var key,\r\n                dataKey = 'composition-handler-' + name,\r\n                handler;\r\n\r\n            config = config || ko.bindingHandlers[name];\r\n            initOptionsFactory = initOptionsFactory || function(){ return undefined;  };\r\n\r\n            handler = ko.bindingHandlers[name] = {\r\n                init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                    if(compositionCount > 0){\r\n                        var data = {\r\n                            trigger:ko.observable(null)\r\n                        };\r\n\r\n                        composition.current.complete(function(){\r\n                            if(config.init){\r\n                                config.init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                            }\r\n\r\n                            if(config.update){\r\n                                ko.utils.domData.set(element, dataKey, config);\r\n                                data.trigger('trigger');\r\n                            }\r\n                        });\r\n\r\n                        ko.utils.domData.set(element, dataKey, data);\r\n                    }else{\r\n                        ko.utils.domData.set(element, dataKey, config);\r\n\r\n                        if(config.init){\r\n                            config.init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                        }\r\n                    }\r\n\r\n                    return initOptionsFactory(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                },\r\n                update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                    var data = ko.utils.domData.get(element, dataKey);\r\n\r\n                    if(data.update){\r\n                        return data.update(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                    }\r\n\r\n                    if(data.trigger){\r\n                        data.trigger();\r\n                    }\r\n                }\r\n            };\r\n\r\n            for (key in config) {\r\n                if (key !== \"init\" && key !== \"update\") {\r\n                    handler[key] = config[key];\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Gets an object keyed with all the elements that are replacable parts, found within the supplied elements. The key will be the part name and the value will be the element itself.\r\n         * @method getParts\r\n         * @param {DOMElement\\DOMElement[]} elements The element(s) to search for parts.\r\n         * @return {object} An object keyed by part.\r\n         */\r\n        getParts: function(elements, parts) {\r\n            parts = parts || {};\r\n\r\n            if (!elements) {\r\n                return parts;\r\n            }\r\n\r\n            if (elements.length === undefined) {\r\n                elements = [elements];\r\n            }\r\n\r\n            for (var i = 0, length = elements.length; i < length; i++) {\r\n                var element = elements[i],\r\n                    id;\r\n\r\n                if (element.getAttribute) {\r\n                    id = element.getAttribute(partAttributeName);\r\n                    if (id) {\r\n                        parts[id] = element;\r\n                    }\r\n\r\n                    if (element.hasChildNodes() && !hasComposition(element)) {\r\n                        composition.getParts(element.childNodes, parts);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return parts;\r\n        },\r\n        cloneNodes:cloneNodes,\r\n        finalize: function (context, element) {\r\n            if(context.transition === undefined) {\r\n                context.transition = this.defaultTransitionName;\r\n            }\r\n\r\n            if(!context.child && !context.activeView){\r\n                if (!context.cacheViews) {\r\n                    ko.virtualElements.emptyNode(context.parent);\r\n                }\r\n\r\n                context.triggerAttach(context, element);\r\n                endComposition(context, element);\r\n            } else if (shouldTransition(context)) {\r\n                var transitionModuleId = this.convertTransitionToModuleId(context.transition);\r\n\r\n                system.acquire(transitionModuleId).then(function (transition) {\r\n                    context.transition = transition;\r\n\r\n                    transition(context).then(function () {\r\n                        if (!context.cacheViews) {\r\n                            if(!context.child){\r\n                                ko.virtualElements.emptyNode(context.parent);\r\n                            }else{\r\n                                removePreviousView(context);\r\n                            }\r\n                        }else if(context.activeView){\r\n                            var instruction = binder.getBindingInstruction(context.activeView);\r\n                            if(instruction && instruction.cacheViews != undefined && !instruction.cacheViews){\r\n                                ko.removeNode(context.activeView);\r\n                            }else{\r\n                                hide(context.activeView);\r\n                            }\r\n                        }\r\n\r\n                        if (context.child) {\r\n                            show(context.child);\r\n                        }\r\n\r\n                        context.triggerAttach(context, element);\r\n                        endComposition(context, element);\r\n                    });\r\n                }).fail(function(err){\r\n                    onError(context, 'Failed to load transition (' + transitionModuleId + '). Details: ' + err.message, element);\r\n                });\r\n            } else {\r\n                if (context.child != context.activeView) {\r\n                    if (context.cacheViews && context.activeView) {\r\n                        var instruction = binder.getBindingInstruction(context.activeView);\r\n                        if(!instruction || (instruction.cacheViews != undefined && !instruction.cacheViews)){\r\n                            ko.removeNode(context.activeView);\r\n                        }else{\r\n                            hide(context.activeView);\r\n                        }\r\n                    }\r\n\r\n                    if (!context.child) {\r\n                        if (!context.cacheViews) {\r\n                            ko.virtualElements.emptyNode(context.parent);\r\n                        }\r\n                    } else {\r\n                        if (!context.cacheViews) {\r\n                            removePreviousView(context);\r\n                        }\r\n\r\n                        show(context.child);\r\n                    }\r\n                }\r\n\r\n                context.triggerAttach(context, element);\r\n                endComposition(context, element);\r\n            }\r\n        },\r\n        bindAndShow: function (child, element, context, skipActivation) {\r\n            context.child = child;\r\n            context.parent.__composition_context = context;\r\n\r\n            if (context.cacheViews) {\r\n                context.composingNewView = (ko.utils.arrayIndexOf(context.viewElements, child) == -1);\r\n            } else {\r\n                context.composingNewView = true;\r\n            }\r\n\r\n            tryActivate(context, function () {\r\n                if (context.parent.__composition_context == context) {\r\n                    try {\r\n                        delete context.parent.__composition_context;\r\n                    }\r\n                    catch(e) {\r\n                        context.parent.__composition_context = undefined;\r\n                    }\r\n\r\n                    if (context.binding) {\r\n                        context.binding(context.child, context.parent, context);\r\n                    }\r\n\r\n                    if (context.preserveContext && context.bindingContext) {\r\n                        if (context.composingNewView) {\r\n                            if(context.parts){\r\n                                replaceParts(context);\r\n                            }\r\n\r\n                            hide(child);\r\n                            ko.virtualElements.prepend(context.parent, child);\r\n\r\n                        binder.bindContext(context.bindingContext, child, context.model, context.as);\r\n                        }\r\n                    } else if (child) {\r\n                        var modelToBind = context.model || dummyModel;\r\n                        var currentModel = ko.dataFor(child);\r\n\r\n                        if (currentModel != modelToBind) {\r\n                            if (!context.composingNewView) {\r\n                                ko.removeNode(child);\r\n                                viewEngine.createView(child.getAttribute('data-view')).then(function(recreatedView) {\r\n                                    composition.bindAndShow(recreatedView, element, context, true);\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if(context.parts){\r\n                                replaceParts(context);\r\n                            }\r\n\r\n                            hide(child);\r\n                            ko.virtualElements.prepend(context.parent, child);\r\n\r\n                            binder.bind(modelToBind, child);\r\n                        }\r\n                    }\r\n\r\n                    composition.finalize(context, element);\r\n                } else {\r\n                    endComposition(context, element);\r\n                }\r\n            }, skipActivation, element);\r\n        },\r\n        /**\r\n         * Eecutes the default view location strategy.\r\n         * @method defaultStrategy\r\n         * @param {object} context The composition context containing the model and possibly existing viewElements.\r\n         * @return {promise} A promise for the view.\r\n         */\r\n        defaultStrategy: function (context) {\r\n            return viewLocator.locateViewForObject(context.model, context.area, context.viewElements);\r\n        },\r\n        getSettings: function (valueAccessor, element) {\r\n            var value = valueAccessor(),\r\n                settings = ko.utils.unwrapObservable(value) || {},\r\n                activatorPresent = activator.isActivator(value),\r\n                moduleId;\r\n\r\n            if (system.isString(settings)) {\r\n                if (viewEngine.isViewUrl(settings)) {\r\n                    settings = {\r\n                        view: settings\r\n                    };\r\n                } else {\r\n                    settings = {\r\n                        model: settings,\r\n                        activate: !activatorPresent\r\n                    };\r\n                }\r\n\r\n                return settings;\r\n            }\r\n\r\n            moduleId = system.getModuleId(settings);\r\n            if (moduleId) {\r\n                settings = {\r\n                    model: settings,\r\n                    activate: !activatorPresent\r\n                };\r\n\r\n                return settings;\r\n            }\r\n\r\n            if(!activatorPresent && settings.model) {\r\n                activatorPresent = activator.isActivator(settings.model);\r\n            }\r\n\r\n            for (var attrName in settings) {\r\n                if (ko.utils.arrayIndexOf(bindableSettings, attrName) != -1) {\r\n                    settings[attrName] = ko.utils.unwrapObservable(settings[attrName]);\r\n                } else {\r\n                    settings[attrName] = settings[attrName];\r\n                }\r\n            }\r\n\r\n            if (activatorPresent) {\r\n                settings.activate = false;\r\n            } else if (settings.activate === undefined) {\r\n                settings.activate = true;\r\n            }\r\n\r\n            return settings;\r\n        },\r\n        executeStrategy: function (context, element) {\r\n            context.strategy(context).then(function (child) {\r\n                composition.bindAndShow(child, element, context);\r\n            });\r\n        },\r\n        inject: function (context, element) {\r\n            if (!context.model) {\r\n                this.bindAndShow(null, element, context);\r\n                return;\r\n            }\r\n\r\n            if (context.view) {\r\n                viewLocator.locateView(context.view, context.area, context.viewElements).then(function (child) {\r\n                    composition.bindAndShow(child, element, context);\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (!context.strategy) {\r\n                context.strategy = this.defaultStrategy;\r\n            }\r\n\r\n            if (system.isString(context.strategy)) {\r\n                system.acquire(context.strategy).then(function (strategy) {\r\n                    context.strategy = strategy;\r\n                    composition.executeStrategy(context, element);\r\n                }).fail(function (err) {\r\n                    onError(context, 'Failed to load view strategy (' + context.strategy + '). Details: ' + err.message, element);\r\n                });\r\n            } else {\r\n                this.executeStrategy(context, element);\r\n            }\r\n        },\r\n        /**\r\n         * Initiates a composition.\r\n         * @method compose\r\n         * @param {DOMElement} element The DOMElement or knockout virtual element that serves as the parent for the composition.\r\n         * @param {object} settings The composition settings.\r\n         * @param {object} [bindingContext] The current binding context.\r\n         */\r\n        compose: function (element, settings, bindingContext, fromBinding) {\r\n            compositionCount++;\r\n\r\n            if(!fromBinding){\r\n                settings = composition.getSettings(function() { return settings; }, element);\r\n            }\r\n\r\n            if (settings.compositionComplete) {\r\n                compositionCompleteCallbacks.push(function () {\r\n                    settings.compositionComplete(settings.child, settings.parent, settings);\r\n                });\r\n            }\r\n\r\n            compositionCompleteCallbacks.push(function () {\r\n                if(settings.composingNewView && settings.model && settings.model.compositionComplete){\r\n                    settings.model.compositionComplete(settings.child, settings.parent, settings);\r\n                }\r\n            });\r\n\r\n            var hostState = getHostState(element);\r\n\r\n            settings.activeView = hostState.activeView;\r\n            settings.parent = element;\r\n            settings.triggerAttach = triggerAttach;\r\n            settings.bindingContext = bindingContext;\r\n\r\n            if (settings.cacheViews && !settings.viewElements) {\r\n                settings.viewElements = hostState.childElements;\r\n            }\r\n\r\n            if (!settings.model) {\r\n                if (!settings.view) {\r\n                    this.bindAndShow(null, element, settings);\r\n                } else {\r\n                    settings.area = settings.area || 'partial';\r\n                    settings.preserveContext = true;\r\n\r\n                    viewLocator.locateView(settings.view, settings.area, settings.viewElements).then(function (child) {\r\n                        composition.bindAndShow(child, element, settings);\r\n                    });\r\n                }\r\n            } else if (system.isString(settings.model)) {\r\n                system.acquire(settings.model).then(function (module) {\r\n                    settings.model = system.resolveObject(module);\r\n                    composition.inject(settings, element);\r\n                }).fail(function (err) {\r\n                    onError(settings, 'Failed to load composed module (' + settings.model + '). Details: ' + err.message, element);\r\n                });\r\n            } else {\r\n                composition.inject(settings, element);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.compose = {\r\n        init: function() {\r\n            return { controlsDescendantBindings: true };\r\n        },\r\n        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n            var settings = composition.getSettings(valueAccessor, element);\r\n            if(settings.mode){\r\n                var data = ko.utils.domData.get(element, compositionDataKey);\r\n                if(!data){\r\n                    var childNodes = ko.virtualElements.childNodes(element);\r\n                    data = {};\r\n\r\n                    if(settings.mode === 'inline'){\r\n                        data.view = viewEngine.ensureSingleElement(childNodes);\r\n                    }else if(settings.mode === 'templated'){\r\n                        data.parts = cloneNodes(childNodes);\r\n                    }\r\n\r\n                    ko.virtualElements.emptyNode(element);\r\n                    ko.utils.domData.set(element, compositionDataKey, data);\r\n                }\r\n\r\n                if(settings.mode === 'inline'){\r\n                    settings.view = data.view.cloneNode(true);\r\n                }else if(settings.mode === 'templated'){\r\n                    settings.parts = data.parts;\r\n                }\r\n\r\n                settings.preserveContext = true;\r\n            }\r\n\r\n            composition.compose(element, settings, bindingContext, true);\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings.compose = true;\r\n\r\n    return composition;\r\n});\r\n"]}