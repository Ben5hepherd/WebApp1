{"version":3,"sources":["durandal/app.js"],"names":["define","system","viewEngine","composition","Events","$","loadPlugins","defer","dfd","allPluginIds","length","resolve","acquire","then","loaded","i","currentModule","install","config","allPluginConfigs","isObject","log","fail","err","error","message","promise","app","title","configurePlugins","baseUrl","pluginIds","keys","indexOf","key","push","start","this","document","setRoot","root","transition","applicationHost","finishComposition","settings","model","canActivate","result","actualResult","compose","hostElement","er","activate","isString","getElementById","isViewUrl","view","module","resolveObject","includeIn"],"mappings":"AAcAA,QAAQ,kBAAmB,sBAAuB,uBAAwB,kBAAmB,UAAW,SAASC,EAAQC,EAAYC,EAAaC,EAAQC,GAKtJ,QAASC,KACL,MAAOL,GAAOM,MAAM,SAASC,GACzB,MAA0B,IAAvBC,EAAaC,WACZF,GAAIG,cAIRV,GAAOW,QAAQH,GAAcI,KAAK,SAASC,GACvC,IAAI,GAAIC,GAAI,EAAGA,EAAID,EAAOJ,OAAQK,IAAI,CAClC,GAAIC,GAAgBF,EAAOC,EAE3B,IAAGC,EAAcC,QAAQ,CACrB,GAAIC,GAASC,EAAiBJ,EAC1Bd,GAAOmB,SAASF,KAChBA,MAGJF,EAAcC,QAAQC,GACtBjB,EAAOoB,IAAI,oBAAsBZ,EAAaM,QAE9Cd,GAAOoB,IAAI,iBAAmBZ,EAAaM,IAInDP,EAAIG,YACLW,KAAK,SAASC,GACbtB,EAAOuB,MAAM,sCAAwCD,EAAIE,aAE9DC,UAhCP,GAAIC,GACAlB,KACAU,IAyJJ,OAnHAQ,IAKIC,MAAO,cAOPC,iBAAiB,SAASX,EAAQY,GAC9B,GAAIC,GAAY9B,EAAO+B,KAAKd,EAC5BY,GAAUA,GAAW,WAElBA,EAAQG,QAAQ,IAAKH,EAAQpB,OAAS,UACrCoB,GAAW,IAGf,KAAI,GAAIf,GAAI,EAAGA,EAAIgB,EAAUrB,OAAQK,IAAI,CACrC,GAAImB,GAAMH,EAAUhB,EACpBN,GAAa0B,KAAKL,EAAUI,GAC5Bf,EAAiBgB,KAAKjB,EAAOgB,MAQrCE,MAAO,WAOH,MANAnC,GAAOoB,IAAI,wBAEPgB,KAAKT,QACLU,SAASV,MAAQS,KAAKT,OAGnB3B,EAAOM,MAAM,SAAUC,GAC1BH,EAAE,WACEC,IAAcO,KAAK,WACfL,EAAIG,UACJV,EAAOoB,IAAI,6BAGpBK,WASPa,QAAS,SAASC,EAAMC,EAAYC,GAmBhC,QAASC,KACL,GAAGC,EAASC,MACR,GAAID,EAASC,MAAMC,YACf,IACI,GAAIC,GAASH,EAASC,MAAMC,aACxBC,IAAUA,EAAOlC,KACjBkC,EAAOlC,KAAK,SAAUmC,GACdA,GACA7C,EAAY8C,QAAQC,EAAaN,KAEtCtB,KAAK,SAAUC,GACdtB,EAAOuB,MAAMD,KAEVwB,GACP5C,EAAY8C,QAAQC,EAAaN,GAEvC,MAAOO,GACLlD,EAAOuB,MAAM2B,OAGjBhD,GAAY8C,QAAQC,EAAaN,OAGrCzC,GAAY8C,QAAQC,EAAaN,GAzCzC,GAAIM,GAAaN,GAAaQ,UAAS,EAAMX,WAAYA,EAGrDS,IADCR,GAAmBzC,EAAOoD,SAASX,GACtBJ,SAASgB,eAAeZ,GAAmB,mBAE3CA,EAGdzC,EAAOoD,SAASb,IACZtC,EAAWqD,UAAUf,GACrBI,EAASY,KAAOhB,EAKpBI,EAASC,MAAQL,EA8BlBvC,EAAOoD,SAAST,EAASC,OACxB5C,EAAOW,QAAQgC,EAASC,OAAOhC,KAAK,SAAS4C,GACzCb,EAASC,MAAQ5C,EAAOyD,cAAcD,GACtCd,MACDrB,KAAK,SAASC,GACbtB,EAAOuB,MAAM,+BAAiCoB,EAASC,MAAQ,eAAiBtB,EAAIE,WAGxFkB,MAKZvC,EAAOuD,UAAUhC,GAEVA","file":"../../durandal/app.js","sourcesContent":["/**\r\n * Durandal 2.2.0 Copyright (c) 2010-2016 Blue Spire Consulting, Inc. All Rights Reserved.\r\n * Available via the MIT license.\r\n * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.\r\n */\r\n/**\r\n * The app module controls app startup, plugin loading/configuration and root visual display.\r\n * @module app\r\n * @requires system\r\n * @requires viewEngine\r\n * @requires composition\r\n * @requires events\r\n * @requires jquery\r\n */\r\ndefine(['durandal/system', 'durandal/viewEngine', 'durandal/composition', 'durandal/events', 'jquery'], function(system, viewEngine, composition, Events, $) {\r\n    var app,\r\n        allPluginIds = [],\r\n        allPluginConfigs = [];\r\n\r\n    function loadPlugins(){\r\n        return system.defer(function(dfd){\r\n            if(allPluginIds.length == 0){\r\n                dfd.resolve();\r\n                return;\r\n            }\r\n\r\n            system.acquire(allPluginIds).then(function(loaded){\r\n                for(var i = 0; i < loaded.length; i++){\r\n                    var currentModule = loaded[i];\r\n\r\n                    if(currentModule.install){\r\n                        var config = allPluginConfigs[i];\r\n                        if(!system.isObject(config)){\r\n                            config = {};\r\n                        }\r\n\r\n                        currentModule.install(config);\r\n                        system.log('Plugin:Installed ' + allPluginIds[i]);\r\n                    }else{\r\n                        system.log('Plugin:Loaded ' + allPluginIds[i]);\r\n                    }\r\n                }\r\n\r\n                dfd.resolve();\r\n            }).fail(function(err){\r\n                system.error('Failed to load plugin(s). Details: ' + err.message);\r\n            });\r\n        }).promise();\r\n    }\r\n\r\n    /**\r\n     * @class AppModule\r\n     * @static\r\n     * @uses Events\r\n     */\r\n    app = {\r\n        /**\r\n         * The title of your application.\r\n         * @property {string} title\r\n         */\r\n        title: 'Application',\r\n        /**\r\n         * Configures one or more plugins to be loaded and installed into the application.\r\n         * @method configurePlugins\r\n         * @param {object} config Keys are plugin names. Values can be truthy, to simply install the plugin, or a configuration object to pass to the plugin.\r\n         * @param {string} [baseUrl] The base url to load the plugins from.\r\n         */\r\n        configurePlugins:function(config, baseUrl){\r\n            var pluginIds = system.keys(config);\r\n            baseUrl = baseUrl || 'plugins/';\r\n\r\n            if(baseUrl.indexOf('/', baseUrl.length - 1) === -1){\r\n                baseUrl += '/';\r\n            }\r\n\r\n            for(var i = 0; i < pluginIds.length; i++){\r\n                var key = pluginIds[i];\r\n                allPluginIds.push(baseUrl + key);\r\n                allPluginConfigs.push(config[key]);\r\n            }\r\n        },\r\n        /**\r\n         * Starts the application.\r\n         * @method start\r\n         * @return {promise}\r\n         */\r\n        start: function() {\r\n            system.log('Application:Starting');\r\n\r\n            if (this.title) {\r\n                document.title = this.title;\r\n            }\r\n\r\n            return system.defer(function (dfd) {\r\n                $(function() {\r\n                    loadPlugins().then(function(){\r\n                        dfd.resolve();\r\n                        system.log('Application:Started');\r\n                    });\r\n                });\r\n            }).promise();\r\n        },\r\n        /**\r\n         * Sets the root module/view for the application.\r\n         * @method setRoot\r\n         * @param {string} root The root view or module.\r\n         * @param {string} [transition] The transition to use from the previous root (or splash screen) into the new root.\r\n         * @param {string} [applicationHost] The application host element or id. By default the id 'applicationHost' will be used.\r\n         */\r\n        setRoot: function(root, transition, applicationHost) {\r\n            var hostElement, settings = { activate:true, transition: transition };\r\n\r\n            if (!applicationHost || system.isString(applicationHost)) {\r\n                hostElement = document.getElementById(applicationHost || 'applicationHost');\r\n            } else {\r\n                hostElement = applicationHost;\r\n            }\r\n\r\n            if (system.isString(root)) {\r\n                if (viewEngine.isViewUrl(root)) {\r\n                    settings.view = root;\r\n                } else {\r\n                    settings.model = root;\r\n                }\r\n            } else {\r\n                settings.model = root;\r\n            }\r\n\r\n            function finishComposition() {\r\n                if(settings.model) {\r\n                    if (settings.model.canActivate) {\r\n                        try {\r\n                            var result = settings.model.canActivate();\r\n                            if (result && result.then) {\r\n                                result.then(function (actualResult) {\r\n                                    if (actualResult) {\r\n                                        composition.compose(hostElement, settings);\r\n                                    }\r\n                                }).fail(function (err) {\r\n                                    system.error(err);\r\n                                });\r\n                            } else if (result) {\r\n                                composition.compose(hostElement, settings);\r\n                            }\r\n                        } catch (er) {\r\n                            system.error(er);\r\n                        }\r\n                    } else {\r\n                        composition.compose(hostElement, settings);\r\n                    }\r\n                } else {\r\n                    composition.compose(hostElement, settings);\r\n                }\r\n            }\r\n\r\n            if(system.isString(settings.model)) {\r\n                system.acquire(settings.model).then(function(module) {\r\n                    settings.model = system.resolveObject(module);\r\n                    finishComposition();\r\n                }).fail(function(err) {\r\n                    system.error('Failed to load root module (' + settings.model + '). Details: ' + err.message);\r\n                });\r\n            } else {\r\n                finishComposition();\r\n            }\r\n        }\r\n    };\r\n\r\n    Events.includeIn(app);\r\n\r\n    return app;\r\n});\r\n"]}