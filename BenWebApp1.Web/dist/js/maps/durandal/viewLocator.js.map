{"version":3,"sources":["durandal/viewLocator.js"],"names":["define","system","viewEngine","findInElements","nodes","url","i","length","current","existingUrl","getAttribute","escape","str","replace","useConvention","modulesPath","viewsPath","areasPath","reg","RegExp","this","convertModuleIdToViewId","moduleId","translateViewIdToArea","viewId","area","locateViewForObject","obj","elementsToSearch","view","getView","locateView","viewUrl","id","getModuleId","determineFallbackViewId","funcNameRegex","results","exec","constructor","toString","typeName","trim","viewOrUrlOrId","isViewUrl","convertViewUrlToViewId","existing","defer","dfd","resolve","promise","createView"],"mappings":"AAWAA,QAAQ,kBAAmB,uBAAwB,SAAUC,EAAQC,GACjE,QAASC,GAAeC,EAAOC,GAC3B,IAAK,GAAIC,GAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CACnC,GAAIE,GAAUJ,EAAME,GAChBG,EAAcD,EAAQE,aAAa,YACvC,IAAID,GAAeJ,EACf,MAAOG,IAKnB,QAASG,GAAOC,GACZ,OAAQA,EAAM,IAAIC,QAAQ,8CAA+C,QAO7E,OAQIC,cAAe,SAASC,EAAaC,EAAWC,GAC5CF,EAAcA,GAAe,aAC7BC,EAAYA,GAAa,QACzBC,EAAYA,GAAaD,CAEzB,IAAIE,GAAM,GAAIC,QAAOR,EAAOI,GAAc,KAE1CK,MAAKC,wBAA0B,SAAUC,GACrC,MAAOA,GAAST,QAAQK,EAAKF,IAGjCI,KAAKG,sBAAwB,SAAUC,EAAQC,GAC3C,MAAKA,IAAgB,WAARA,EAINR,EAAY,IAAMQ,EAAO,IAAMD,EAH3BP,EAAY,IAAMO,IAcrCE,oBAAqB,SAASC,EAAKF,EAAMG,GACrC,GAAIC,EAEJ,IAAIF,EAAIG,UACJD,EAAOF,EAAIG,WAEP,MAAOV,MAAKW,WAAWF,EAAMJ,EAAMG,EAI3C,IAAID,EAAIK,QACJ,MAAOZ,MAAKW,WAAWJ,EAAIK,QAASP,EAAMG,EAG9C,IAAIK,GAAKhC,EAAOiC,YAAYP,EAC5B,OAAIM,GACOb,KAAKW,WAAWX,KAAKC,wBAAwBY,GAAKR,EAAMG,GAG5DR,KAAKW,WAAWX,KAAKe,wBAAwBR,GAAMF,EAAMG,IAQpEP,wBAAyB,SAASC,GAC9B,MAAOA,IAQXa,wBAAyB,SAAUR,GAC/B,GAAIS,GAAgB,qBAChBC,EAAU,EAAgBC,KAAK,EAAMC,YAAYC,YACjDC,EAAYJ,GAAWA,EAAQ9B,OAAS,EAAK8B,EAAQ,GAAK,EAE9D,OADAI,GAAWA,EAASC,OACb,SAAWD,GAStBlB,sBAAuB,SAAUC,EAAQC,GACrC,MAAOD,IAUXO,WAAY,SAASY,EAAelB,EAAMG,GACtC,GAA6B,gBAAlBe,GAA4B,CACnC,GAAInB,EAYJ,IATIA,EADAtB,EAAW0C,UAAUD,GACZzC,EAAW2C,uBAAuBF,GAElCA,EAGTlB,IACAD,EAASJ,KAAKG,sBAAsBC,EAAQC,IAG5CG,EAAkB,CAClB,GAAIkB,GAAW3C,EAAeyB,EAAkBJ,EAChD,IAAIsB,EACA,MAAO7C,GAAO8C,MAAM,SAASC,GACzBA,EAAIC,QAAQH,KACbI,UAIX,MAAOhD,GAAWiD,WAAW3B,GAGjC,MAAOvB,GAAO8C,MAAM,SAASC,GACzBA,EAAIC,QAAQN,KACbO","file":"../../durandal/viewLocator.js","sourcesContent":["/**\r\n * Durandal 2.2.0 Copyright (c) 2010-2016 Blue Spire Consulting, Inc. All Rights Reserved.\r\n * Available via the MIT license.\r\n * see: http://durandaljs.com or https://github.com/BlueSpire/Durandal for details.\r\n */\r\n/**\r\n * The viewLocator module collaborates with the viewEngine module to provide views (literally dom sub-trees) to other parts of the framework as needed. The primary consumer of the viewLocator is the composition module.\r\n * @module viewLocator\r\n * @requires system\r\n * @requires viewEngine\r\n */\r\ndefine(['durandal/system', 'durandal/viewEngine'], function (system, viewEngine) {\r\n    function findInElements(nodes, url) {\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            var current = nodes[i];\r\n            var existingUrl = current.getAttribute('data-view');\r\n            if (existingUrl == url) {\r\n                return current;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function escape(str) {\r\n        return (str + '').replace(/([\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}\\=\\!\\<\\>\\|\\:])/g, \"\\\\$1\");\r\n    }\r\n\r\n    /**\r\n     * @class ViewLocatorModule\r\n     * @static\r\n     */\r\n    return {\r\n        /**\r\n         * Allows you to set up a convention for mapping module folders to view folders. It is a convenience method that customizes `convertModuleIdToViewId` and `translateViewIdToArea` under the covers.\r\n         * @method useConvention\r\n         * @param {string} [modulesPath] A string to match in the path and replace with the viewsPath. If not specified, the match is 'viewmodels'.\r\n         * @param {string} [viewsPath] The replacement for the modulesPath. If not specified, the replacement is 'views'.\r\n         * @param {string} [areasPath] Partial views are mapped to the \"views\" folder if not specified. Use this parameter to change their location.\r\n         */\r\n        useConvention: function(modulesPath, viewsPath, areasPath) {\r\n            modulesPath = modulesPath || 'viewmodels';\r\n            viewsPath = viewsPath || 'views';\r\n            areasPath = areasPath || viewsPath;\r\n\r\n            var reg = new RegExp(escape(modulesPath), 'gi');\r\n\r\n            this.convertModuleIdToViewId = function (moduleId) {\r\n                return moduleId.replace(reg, viewsPath);\r\n            };\r\n\r\n            this.translateViewIdToArea = function (viewId, area) {\r\n                if (!area || area == 'partial') {\r\n                    return areasPath + '/' + viewId;\r\n                }\r\n                \r\n                return areasPath + '/' + area + '/' + viewId;\r\n            };\r\n        },\r\n        /**\r\n         * Maps an object instance to a view instance.\r\n         * @method locateViewForObject\r\n         * @param {object} obj The object to locate the view for.\r\n         * @param {string} [area] The area to translate the view to.\r\n         * @param {DOMElement[]} [elementsToSearch] An existing set of elements to search first.\r\n         * @return {Promise} A promise of the view.\r\n         */\r\n        locateViewForObject: function(obj, area, elementsToSearch) {\r\n            var view;\r\n\r\n            if (obj.getView) {\r\n                view = obj.getView();\r\n                if (view) {\r\n                    return this.locateView(view, area, elementsToSearch);\r\n                }\r\n            }\r\n\r\n            if (obj.viewUrl) {\r\n                return this.locateView(obj.viewUrl, area, elementsToSearch);\r\n            }\r\n\r\n            var id = system.getModuleId(obj);\r\n            if (id) {\r\n                return this.locateView(this.convertModuleIdToViewId(id), area, elementsToSearch);\r\n            }\r\n\r\n            return this.locateView(this.determineFallbackViewId(obj), area, elementsToSearch);\r\n        },\r\n        /**\r\n         * Converts a module id into a view id. By default the ids are the same.\r\n         * @method convertModuleIdToViewId\r\n         * @param {string} moduleId The module id.\r\n         * @return {string} The view id.\r\n         */\r\n        convertModuleIdToViewId: function(moduleId) {\r\n            return moduleId;\r\n        },\r\n        /**\r\n         * If no view id can be determined, this function is called to genreate one. By default it attempts to determine the object's type and use that.\r\n         * @method determineFallbackViewId\r\n         * @param {object} obj The object to determine the fallback id for.\r\n         * @return {string} The view id.\r\n         */\r\n        determineFallbackViewId: function (obj) {\r\n            var funcNameRegex = /function (.{1,})\\(/;\r\n            var results = (funcNameRegex).exec((obj).constructor.toString());\r\n            var typeName = (results && results.length > 1) ? results[1] : \"\";\r\n            typeName = typeName.trim();\r\n            return 'views/' + typeName;\r\n        },\r\n        /**\r\n         * Takes a view id and translates it into a particular area. By default, no translation occurs.\r\n         * @method translateViewIdToArea\r\n         * @param {string} viewId The view id.\r\n         * @param {string} area The area to translate the view to.\r\n         * @return {string} The translated view id.\r\n         */\r\n        translateViewIdToArea: function (viewId, area) {\r\n            return viewId;\r\n        },\r\n        /**\r\n         * Locates the specified view.\r\n         * @method locateView\r\n         * @param {string|DOMElement} viewOrUrlOrId A view, view url or view id to locate.\r\n         * @param {string} [area] The area to translate the view to.\r\n         * @param {DOMElement[]} [elementsToSearch] An existing set of elements to search first.\r\n         * @return {Promise} A promise of the view.\r\n         */\r\n        locateView: function(viewOrUrlOrId, area, elementsToSearch) {\r\n            if (typeof viewOrUrlOrId === 'string') {\r\n                var viewId;\r\n\r\n                if (viewEngine.isViewUrl(viewOrUrlOrId)) {\r\n                    viewId = viewEngine.convertViewUrlToViewId(viewOrUrlOrId);\r\n                } else {\r\n                    viewId = viewOrUrlOrId;\r\n                }\r\n\r\n                if (area) {\r\n                    viewId = this.translateViewIdToArea(viewId, area);\r\n                }\r\n\r\n                if (elementsToSearch) {\r\n                    var existing = findInElements(elementsToSearch, viewId);\r\n                    if (existing) {\r\n                        return system.defer(function(dfd) {\r\n                            dfd.resolve(existing);\r\n                        }).promise();\r\n                    }\r\n                }\r\n\r\n                return viewEngine.createView(viewId);\r\n            }\r\n\r\n            return system.defer(function(dfd) {\r\n                dfd.resolve(viewOrUrlOrId);\r\n            }).promise();\r\n        }\r\n    };\r\n});\r\n"]}